; File auto-generated by gentests

; Auto-generated part begin
(rule
 (target testfile-poly_arrays022_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays022.expected 
     testfile-poly_arrays022_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays022_cdcl.output)
 (deps (:input testfile-poly_arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays022.expected 
     testfile-poly_arrays022_cdcl.output)))

(rule
 (target testfile-poly_arrays022_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays022.expected 
     testfile-poly_arrays022_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays022_tableaux.output)
 (deps (:input testfile-poly_arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays022.expected 
     testfile-poly_arrays022_tableaux.output)))

(rule
 (target testfile-poly_arrays021_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays021.expected 
     testfile-poly_arrays021_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays021_cdcl.output)
 (deps (:input testfile-poly_arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays021.expected 
     testfile-poly_arrays021_cdcl.output)))

(rule
 (target testfile-poly_arrays021_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays021.expected 
     testfile-poly_arrays021_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays021_tableaux.output)
 (deps (:input testfile-poly_arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays021.expected 
     testfile-poly_arrays021_tableaux.output)))

(rule
 (target testfile-poly_arrays020_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays020.expected 
     testfile-poly_arrays020_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays020_cdcl.output)
 (deps (:input testfile-poly_arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays020.expected 
     testfile-poly_arrays020_cdcl.output)))

(rule
 (target testfile-poly_arrays020_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays020.expected 
     testfile-poly_arrays020_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays020_tableaux.output)
 (deps (:input testfile-poly_arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays020.expected 
     testfile-poly_arrays020_tableaux.output)))

(rule
 (target testfile-poly_arrays019_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays019.expected 
     testfile-poly_arrays019_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays019_cdcl.output)
 (deps (:input testfile-poly_arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays019.expected 
     testfile-poly_arrays019_cdcl.output)))

(rule
 (target testfile-poly_arrays019_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays019.expected 
     testfile-poly_arrays019_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays019_tableaux.output)
 (deps (:input testfile-poly_arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays019.expected 
     testfile-poly_arrays019_tableaux.output)))

(rule
 (target testfile-poly_arrays018_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays018.expected 
     testfile-poly_arrays018_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays018_cdcl.output)
 (deps (:input testfile-poly_arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays018.expected 
     testfile-poly_arrays018_cdcl.output)))

(rule
 (target testfile-poly_arrays018_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays018.expected 
     testfile-poly_arrays018_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays018_tableaux.output)
 (deps (:input testfile-poly_arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays018.expected 
     testfile-poly_arrays018_tableaux.output)))

(rule
 (target testfile-poly_arrays017_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays017.expected 
     testfile-poly_arrays017_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays017_cdcl.output)
 (deps (:input testfile-poly_arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays017.expected 
     testfile-poly_arrays017_cdcl.output)))

(rule
 (target testfile-poly_arrays017_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays017.expected 
     testfile-poly_arrays017_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays017_tableaux.output)
 (deps (:input testfile-poly_arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays017.expected 
     testfile-poly_arrays017_tableaux.output)))

(rule
 (target testfile-poly_arrays016_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays016.expected 
     testfile-poly_arrays016_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays016_cdcl.output)
 (deps (:input testfile-poly_arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays016.expected 
     testfile-poly_arrays016_cdcl.output)))

(rule
 (target testfile-poly_arrays016_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays016.expected 
     testfile-poly_arrays016_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays016_tableaux.output)
 (deps (:input testfile-poly_arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays016.expected 
     testfile-poly_arrays016_tableaux.output)))

(rule
 (target testfile-poly_arrays015_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays015.expected 
     testfile-poly_arrays015_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays015_cdcl.output)
 (deps (:input testfile-poly_arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays015.expected 
     testfile-poly_arrays015_cdcl.output)))

(rule
 (target testfile-poly_arrays015_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays015.expected 
     testfile-poly_arrays015_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays015_tableaux.output)
 (deps (:input testfile-poly_arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays015.expected 
     testfile-poly_arrays015_tableaux.output)))

(rule
 (target testfile-poly_arrays014_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays014.expected 
     testfile-poly_arrays014_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays014_cdcl.output)
 (deps (:input testfile-poly_arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays014.expected 
     testfile-poly_arrays014_cdcl.output)))

(rule
 (target testfile-poly_arrays014_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays014.expected 
     testfile-poly_arrays014_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays014_tableaux.output)
 (deps (:input testfile-poly_arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays014.expected 
     testfile-poly_arrays014_tableaux.output)))

(rule
 (target testfile-poly_arrays013_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays013.expected 
     testfile-poly_arrays013_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays013_cdcl.output)
 (deps (:input testfile-poly_arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays013.expected 
     testfile-poly_arrays013_cdcl.output)))

(rule
 (target testfile-poly_arrays013_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays013.expected 
     testfile-poly_arrays013_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays013_tableaux.output)
 (deps (:input testfile-poly_arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays013.expected 
     testfile-poly_arrays013_tableaux.output)))

(rule
 (target testfile-poly_arrays012_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays012.expected 
     testfile-poly_arrays012_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays012_cdcl.output)
 (deps (:input testfile-poly_arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays012.expected 
     testfile-poly_arrays012_cdcl.output)))

(rule
 (target testfile-poly_arrays012_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays012.expected 
     testfile-poly_arrays012_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays012_tableaux.output)
 (deps (:input testfile-poly_arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays012.expected 
     testfile-poly_arrays012_tableaux.output)))

(rule
 (target testfile-poly_arrays011_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays011.expected 
     testfile-poly_arrays011_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays011_cdcl.output)
 (deps (:input testfile-poly_arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays011.expected 
     testfile-poly_arrays011_cdcl.output)))

(rule
 (target testfile-poly_arrays011_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays011.expected 
     testfile-poly_arrays011_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays011_tableaux.output)
 (deps (:input testfile-poly_arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays011.expected 
     testfile-poly_arrays011_tableaux.output)))

(rule
 (target testfile-poly_arrays010_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays010.expected 
     testfile-poly_arrays010_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays010_cdcl.output)
 (deps (:input testfile-poly_arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays010.expected 
     testfile-poly_arrays010_cdcl.output)))

(rule
 (target testfile-poly_arrays010_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays010.expected 
     testfile-poly_arrays010_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays010_tableaux.output)
 (deps (:input testfile-poly_arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays010.expected 
     testfile-poly_arrays010_tableaux.output)))

(rule
 (target testfile-poly_arrays009_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays009.expected 
     testfile-poly_arrays009_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays009_cdcl.output)
 (deps (:input testfile-poly_arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays009.expected 
     testfile-poly_arrays009_cdcl.output)))

(rule
 (target testfile-poly_arrays009_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays009.expected 
     testfile-poly_arrays009_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays009_tableaux.output)
 (deps (:input testfile-poly_arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays009.expected 
     testfile-poly_arrays009_tableaux.output)))

(rule
 (target testfile-poly_arrays008_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays008.expected 
     testfile-poly_arrays008_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays008_cdcl.output)
 (deps (:input testfile-poly_arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays008.expected 
     testfile-poly_arrays008_cdcl.output)))

(rule
 (target testfile-poly_arrays008_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays008.expected 
     testfile-poly_arrays008_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays008_tableaux.output)
 (deps (:input testfile-poly_arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays008.expected 
     testfile-poly_arrays008_tableaux.output)))

(rule
 (target testfile-poly_arrays007_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays007.expected 
     testfile-poly_arrays007_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays007_cdcl.output)
 (deps (:input testfile-poly_arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays007.expected 
     testfile-poly_arrays007_cdcl.output)))

(rule
 (target testfile-poly_arrays007_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays007.expected 
     testfile-poly_arrays007_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays007_tableaux.output)
 (deps (:input testfile-poly_arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays007.expected 
     testfile-poly_arrays007_tableaux.output)))

(rule
 (target testfile-poly_arrays006_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays006.expected 
     testfile-poly_arrays006_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays006_cdcl.output)
 (deps (:input testfile-poly_arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays006.expected 
     testfile-poly_arrays006_cdcl.output)))

(rule
 (target testfile-poly_arrays006_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays006.expected 
     testfile-poly_arrays006_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays006_tableaux.output)
 (deps (:input testfile-poly_arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays006.expected 
     testfile-poly_arrays006_tableaux.output)))

(rule
 (target testfile-poly_arrays005_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays005.expected 
     testfile-poly_arrays005_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays005_cdcl.output)
 (deps (:input testfile-poly_arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays005.expected 
     testfile-poly_arrays005_cdcl.output)))

(rule
 (target testfile-poly_arrays005_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays005.expected 
     testfile-poly_arrays005_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays005_tableaux.output)
 (deps (:input testfile-poly_arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays005.expected 
     testfile-poly_arrays005_tableaux.output)))

(rule
 (target testfile-poly_arrays004_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays004.expected 
     testfile-poly_arrays004_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays004_cdcl.output)
 (deps (:input testfile-poly_arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays004.expected 
     testfile-poly_arrays004_cdcl.output)))

(rule
 (target testfile-poly_arrays004_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays004.expected 
     testfile-poly_arrays004_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays004_tableaux.output)
 (deps (:input testfile-poly_arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays004.expected 
     testfile-poly_arrays004_tableaux.output)))

(rule
 (target testfile-poly_arrays003_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays003.expected 
     testfile-poly_arrays003_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays003_cdcl.output)
 (deps (:input testfile-poly_arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays003.expected 
     testfile-poly_arrays003_cdcl.output)))

(rule
 (target testfile-poly_arrays003_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays003.expected 
     testfile-poly_arrays003_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays003_tableaux.output)
 (deps (:input testfile-poly_arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays003.expected 
     testfile-poly_arrays003_tableaux.output)))

(rule
 (target testfile-poly_arrays002_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays002.expected 
     testfile-poly_arrays002_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays002_cdcl.output)
 (deps (:input testfile-poly_arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays002.expected 
     testfile-poly_arrays002_cdcl.output)))

(rule
 (target testfile-poly_arrays002_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays002.expected 
     testfile-poly_arrays002_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays002_tableaux.output)
 (deps (:input testfile-poly_arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays002.expected 
     testfile-poly_arrays002_tableaux.output)))

(rule
 (target testfile-poly_arrays001_cdcl_tableaux.output)
 (deps (:input testfile-poly_arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays001.expected 
     testfile-poly_arrays001_cdcl_tableaux.output)))

(rule
 (target testfile-poly_arrays001_cdcl.output)
 (deps (:input testfile-poly_arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays001.expected 
     testfile-poly_arrays001_cdcl.output)))

(rule
 (target testfile-poly_arrays001_tableaux_cdcl.output)
 (deps (:input testfile-poly_arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays001.expected 
     testfile-poly_arrays001_tableaux_cdcl.output)))

(rule
 (target testfile-poly_arrays001_tableaux.output)
 (deps (:input testfile-poly_arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-poly_arrays001.expected 
     testfile-poly_arrays001_tableaux.output)))

(rule
 (target testfile-arrays053_cdcl_tableaux.output)
 (deps (:input testfile-arrays053.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays053.expected 
     testfile-arrays053_cdcl_tableaux.output)))

(rule
 (target testfile-arrays053_cdcl.output)
 (deps (:input testfile-arrays053.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays053.expected 
     testfile-arrays053_cdcl.output)))

(rule
 (target testfile-arrays053_tableaux_cdcl.output)
 (deps (:input testfile-arrays053.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays053.expected 
     testfile-arrays053_tableaux_cdcl.output)))

(rule
 (target testfile-arrays053_tableaux.output)
 (deps (:input testfile-arrays053.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays053.expected 
     testfile-arrays053_tableaux.output)))

(rule
 (target testfile-arrays052_cdcl_tableaux.output)
 (deps (:input testfile-arrays052.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays052.expected 
     testfile-arrays052_cdcl_tableaux.output)))

(rule
 (target testfile-arrays052_cdcl.output)
 (deps (:input testfile-arrays052.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays052.expected 
     testfile-arrays052_cdcl.output)))

(rule
 (target testfile-arrays052_tableaux_cdcl.output)
 (deps (:input testfile-arrays052.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays052.expected 
     testfile-arrays052_tableaux_cdcl.output)))

(rule
 (target testfile-arrays052_tableaux.output)
 (deps (:input testfile-arrays052.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays052.expected 
     testfile-arrays052_tableaux.output)))

(rule
 (target testfile-arrays051_cdcl_tableaux.output)
 (deps (:input testfile-arrays051.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays051.expected 
     testfile-arrays051_cdcl_tableaux.output)))

(rule
 (target testfile-arrays051_cdcl.output)
 (deps (:input testfile-arrays051.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays051.expected 
     testfile-arrays051_cdcl.output)))

(rule
 (target testfile-arrays051_tableaux_cdcl.output)
 (deps (:input testfile-arrays051.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays051.expected 
     testfile-arrays051_tableaux_cdcl.output)))

(rule
 (target testfile-arrays051_tableaux.output)
 (deps (:input testfile-arrays051.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays051.expected 
     testfile-arrays051_tableaux.output)))

(rule
 (target testfile-arrays050_cdcl_tableaux.output)
 (deps (:input testfile-arrays050.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays050.expected 
     testfile-arrays050_cdcl_tableaux.output)))

(rule
 (target testfile-arrays050_cdcl.output)
 (deps (:input testfile-arrays050.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays050.expected 
     testfile-arrays050_cdcl.output)))

(rule
 (target testfile-arrays050_tableaux_cdcl.output)
 (deps (:input testfile-arrays050.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays050.expected 
     testfile-arrays050_tableaux_cdcl.output)))

(rule
 (target testfile-arrays050_tableaux.output)
 (deps (:input testfile-arrays050.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays050.expected 
     testfile-arrays050_tableaux.output)))

(rule
 (target testfile-arrays049_cdcl_tableaux.output)
 (deps (:input testfile-arrays049.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays049.expected 
     testfile-arrays049_cdcl_tableaux.output)))

(rule
 (target testfile-arrays049_cdcl.output)
 (deps (:input testfile-arrays049.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays049.expected 
     testfile-arrays049_cdcl.output)))

(rule
 (target testfile-arrays049_tableaux_cdcl.output)
 (deps (:input testfile-arrays049.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays049.expected 
     testfile-arrays049_tableaux_cdcl.output)))

(rule
 (target testfile-arrays049_tableaux.output)
 (deps (:input testfile-arrays049.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays049.expected 
     testfile-arrays049_tableaux.output)))

(rule
 (target testfile-arrays048_cdcl_tableaux.output)
 (deps (:input testfile-arrays048.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays048.expected 
     testfile-arrays048_cdcl_tableaux.output)))

(rule
 (target testfile-arrays048_cdcl.output)
 (deps (:input testfile-arrays048.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays048.expected 
     testfile-arrays048_cdcl.output)))

(rule
 (target testfile-arrays048_tableaux_cdcl.output)
 (deps (:input testfile-arrays048.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays048.expected 
     testfile-arrays048_tableaux_cdcl.output)))

(rule
 (target testfile-arrays048_tableaux.output)
 (deps (:input testfile-arrays048.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays048.expected 
     testfile-arrays048_tableaux.output)))

(rule
 (target testfile-arrays047_cdcl_tableaux.output)
 (deps (:input testfile-arrays047.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays047.expected 
     testfile-arrays047_cdcl_tableaux.output)))

(rule
 (target testfile-arrays047_cdcl.output)
 (deps (:input testfile-arrays047.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays047.expected 
     testfile-arrays047_cdcl.output)))

(rule
 (target testfile-arrays047_tableaux_cdcl.output)
 (deps (:input testfile-arrays047.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays047.expected 
     testfile-arrays047_tableaux_cdcl.output)))

(rule
 (target testfile-arrays047_tableaux.output)
 (deps (:input testfile-arrays047.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays047.expected 
     testfile-arrays047_tableaux.output)))

(rule
 (target testfile-arrays046_cdcl_tableaux.output)
 (deps (:input testfile-arrays046.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays046.expected 
     testfile-arrays046_cdcl_tableaux.output)))

(rule
 (target testfile-arrays046_cdcl.output)
 (deps (:input testfile-arrays046.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays046.expected 
     testfile-arrays046_cdcl.output)))

(rule
 (target testfile-arrays046_tableaux_cdcl.output)
 (deps (:input testfile-arrays046.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays046.expected 
     testfile-arrays046_tableaux_cdcl.output)))

(rule
 (target testfile-arrays046_tableaux.output)
 (deps (:input testfile-arrays046.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays046.expected 
     testfile-arrays046_tableaux.output)))

(rule
 (target testfile-arrays045_cdcl_tableaux.output)
 (deps (:input testfile-arrays045.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays045.expected 
     testfile-arrays045_cdcl_tableaux.output)))

(rule
 (target testfile-arrays045_cdcl.output)
 (deps (:input testfile-arrays045.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays045.expected 
     testfile-arrays045_cdcl.output)))

(rule
 (target testfile-arrays045_tableaux_cdcl.output)
 (deps (:input testfile-arrays045.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays045.expected 
     testfile-arrays045_tableaux_cdcl.output)))

(rule
 (target testfile-arrays045_tableaux.output)
 (deps (:input testfile-arrays045.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays045.expected 
     testfile-arrays045_tableaux.output)))

(rule
 (target testfile-arrays044_cdcl_tableaux.output)
 (deps (:input testfile-arrays044.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays044.expected 
     testfile-arrays044_cdcl_tableaux.output)))

(rule
 (target testfile-arrays044_cdcl.output)
 (deps (:input testfile-arrays044.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays044.expected 
     testfile-arrays044_cdcl.output)))

(rule
 (target testfile-arrays044_tableaux_cdcl.output)
 (deps (:input testfile-arrays044.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays044.expected 
     testfile-arrays044_tableaux_cdcl.output)))

(rule
 (target testfile-arrays044_tableaux.output)
 (deps (:input testfile-arrays044.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays044.expected 
     testfile-arrays044_tableaux.output)))

(rule
 (target testfile-arrays043_cdcl_tableaux.output)
 (deps (:input testfile-arrays043.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays043.expected 
     testfile-arrays043_cdcl_tableaux.output)))

(rule
 (target testfile-arrays043_cdcl.output)
 (deps (:input testfile-arrays043.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays043.expected 
     testfile-arrays043_cdcl.output)))

(rule
 (target testfile-arrays043_tableaux_cdcl.output)
 (deps (:input testfile-arrays043.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays043.expected 
     testfile-arrays043_tableaux_cdcl.output)))

(rule
 (target testfile-arrays043_tableaux.output)
 (deps (:input testfile-arrays043.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays043.expected 
     testfile-arrays043_tableaux.output)))

(rule
 (target testfile-arrays042_cdcl_tableaux.output)
 (deps (:input testfile-arrays042.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays042.expected 
     testfile-arrays042_cdcl_tableaux.output)))

(rule
 (target testfile-arrays042_cdcl.output)
 (deps (:input testfile-arrays042.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays042.expected 
     testfile-arrays042_cdcl.output)))

(rule
 (target testfile-arrays042_tableaux_cdcl.output)
 (deps (:input testfile-arrays042.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays042.expected 
     testfile-arrays042_tableaux_cdcl.output)))

(rule
 (target testfile-arrays042_tableaux.output)
 (deps (:input testfile-arrays042.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays042.expected 
     testfile-arrays042_tableaux.output)))

(rule
 (target testfile-arrays041_cdcl_tableaux.output)
 (deps (:input testfile-arrays041.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays041.expected 
     testfile-arrays041_cdcl_tableaux.output)))

(rule
 (target testfile-arrays041_cdcl.output)
 (deps (:input testfile-arrays041.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays041.expected 
     testfile-arrays041_cdcl.output)))

(rule
 (target testfile-arrays041_tableaux_cdcl.output)
 (deps (:input testfile-arrays041.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays041.expected 
     testfile-arrays041_tableaux_cdcl.output)))

(rule
 (target testfile-arrays041_tableaux.output)
 (deps (:input testfile-arrays041.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays041.expected 
     testfile-arrays041_tableaux.output)))

(rule
 (target testfile-arrays040_cdcl_tableaux.output)
 (deps (:input testfile-arrays040.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays040.expected 
     testfile-arrays040_cdcl_tableaux.output)))

(rule
 (target testfile-arrays040_cdcl.output)
 (deps (:input testfile-arrays040.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays040.expected 
     testfile-arrays040_cdcl.output)))

(rule
 (target testfile-arrays040_tableaux_cdcl.output)
 (deps (:input testfile-arrays040.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays040.expected 
     testfile-arrays040_tableaux_cdcl.output)))

(rule
 (target testfile-arrays040_tableaux.output)
 (deps (:input testfile-arrays040.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays040.expected 
     testfile-arrays040_tableaux.output)))

(rule
 (target testfile-arrays039_cdcl_tableaux.output)
 (deps (:input testfile-arrays039.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays039.expected 
     testfile-arrays039_cdcl_tableaux.output)))

(rule
 (target testfile-arrays039_cdcl.output)
 (deps (:input testfile-arrays039.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays039.expected 
     testfile-arrays039_cdcl.output)))

(rule
 (target testfile-arrays039_tableaux_cdcl.output)
 (deps (:input testfile-arrays039.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays039.expected 
     testfile-arrays039_tableaux_cdcl.output)))

(rule
 (target testfile-arrays039_tableaux.output)
 (deps (:input testfile-arrays039.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays039.expected 
     testfile-arrays039_tableaux.output)))

(rule
 (target testfile-arrays038_cdcl_tableaux.output)
 (deps (:input testfile-arrays038.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays038.expected 
     testfile-arrays038_cdcl_tableaux.output)))

(rule
 (target testfile-arrays038_cdcl.output)
 (deps (:input testfile-arrays038.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays038.expected 
     testfile-arrays038_cdcl.output)))

(rule
 (target testfile-arrays038_tableaux_cdcl.output)
 (deps (:input testfile-arrays038.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays038.expected 
     testfile-arrays038_tableaux_cdcl.output)))

(rule
 (target testfile-arrays038_tableaux.output)
 (deps (:input testfile-arrays038.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays038.expected 
     testfile-arrays038_tableaux.output)))

(rule
 (target testfile-arrays037_cdcl_tableaux.output)
 (deps (:input testfile-arrays037.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays037.expected 
     testfile-arrays037_cdcl_tableaux.output)))

(rule
 (target testfile-arrays037_cdcl.output)
 (deps (:input testfile-arrays037.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays037.expected 
     testfile-arrays037_cdcl.output)))

(rule
 (target testfile-arrays037_tableaux_cdcl.output)
 (deps (:input testfile-arrays037.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays037.expected 
     testfile-arrays037_tableaux_cdcl.output)))

(rule
 (target testfile-arrays037_tableaux.output)
 (deps (:input testfile-arrays037.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays037.expected 
     testfile-arrays037_tableaux.output)))

(rule
 (target testfile-arrays036_cdcl_tableaux.output)
 (deps (:input testfile-arrays036.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays036.expected 
     testfile-arrays036_cdcl_tableaux.output)))

(rule
 (target testfile-arrays036_cdcl.output)
 (deps (:input testfile-arrays036.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays036.expected 
     testfile-arrays036_cdcl.output)))

(rule
 (target testfile-arrays036_tableaux_cdcl.output)
 (deps (:input testfile-arrays036.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays036.expected 
     testfile-arrays036_tableaux_cdcl.output)))

(rule
 (target testfile-arrays036_tableaux.output)
 (deps (:input testfile-arrays036.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays036.expected 
     testfile-arrays036_tableaux.output)))

(rule
 (target testfile-arrays035_cdcl_tableaux.output)
 (deps (:input testfile-arrays035.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays035.expected 
     testfile-arrays035_cdcl_tableaux.output)))

(rule
 (target testfile-arrays035_cdcl.output)
 (deps (:input testfile-arrays035.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays035.expected 
     testfile-arrays035_cdcl.output)))

(rule
 (target testfile-arrays035_tableaux_cdcl.output)
 (deps (:input testfile-arrays035.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays035.expected 
     testfile-arrays035_tableaux_cdcl.output)))

(rule
 (target testfile-arrays035_tableaux.output)
 (deps (:input testfile-arrays035.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays035.expected 
     testfile-arrays035_tableaux.output)))

(rule
 (target testfile-arrays034_cdcl_tableaux.output)
 (deps (:input testfile-arrays034.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays034.expected 
     testfile-arrays034_cdcl_tableaux.output)))

(rule
 (target testfile-arrays034_cdcl.output)
 (deps (:input testfile-arrays034.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays034.expected 
     testfile-arrays034_cdcl.output)))

(rule
 (target testfile-arrays034_tableaux_cdcl.output)
 (deps (:input testfile-arrays034.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays034.expected 
     testfile-arrays034_tableaux_cdcl.output)))

(rule
 (target testfile-arrays034_tableaux.output)
 (deps (:input testfile-arrays034.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays034.expected 
     testfile-arrays034_tableaux.output)))

(rule
 (target testfile-arrays033_cdcl_tableaux.output)
 (deps (:input testfile-arrays033.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays033.expected 
     testfile-arrays033_cdcl_tableaux.output)))

(rule
 (target testfile-arrays033_cdcl.output)
 (deps (:input testfile-arrays033.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays033.expected 
     testfile-arrays033_cdcl.output)))

(rule
 (target testfile-arrays033_tableaux_cdcl.output)
 (deps (:input testfile-arrays033.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays033.expected 
     testfile-arrays033_tableaux_cdcl.output)))

(rule
 (target testfile-arrays033_tableaux.output)
 (deps (:input testfile-arrays033.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays033.expected 
     testfile-arrays033_tableaux.output)))

(rule
 (target testfile-arrays032_cdcl_tableaux.output)
 (deps (:input testfile-arrays032.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays032.expected 
     testfile-arrays032_cdcl_tableaux.output)))

(rule
 (target testfile-arrays032_cdcl.output)
 (deps (:input testfile-arrays032.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays032.expected 
     testfile-arrays032_cdcl.output)))

(rule
 (target testfile-arrays032_tableaux_cdcl.output)
 (deps (:input testfile-arrays032.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays032.expected 
     testfile-arrays032_tableaux_cdcl.output)))

(rule
 (target testfile-arrays032_tableaux.output)
 (deps (:input testfile-arrays032.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays032.expected 
     testfile-arrays032_tableaux.output)))

(rule
 (target testfile-arrays031_cdcl_tableaux.output)
 (deps (:input testfile-arrays031.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays031.expected 
     testfile-arrays031_cdcl_tableaux.output)))

(rule
 (target testfile-arrays031_cdcl.output)
 (deps (:input testfile-arrays031.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays031.expected 
     testfile-arrays031_cdcl.output)))

(rule
 (target testfile-arrays031_tableaux_cdcl.output)
 (deps (:input testfile-arrays031.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays031.expected 
     testfile-arrays031_tableaux_cdcl.output)))

(rule
 (target testfile-arrays031_tableaux.output)
 (deps (:input testfile-arrays031.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays031.expected 
     testfile-arrays031_tableaux.output)))

(rule
 (target testfile-arrays030_cdcl_tableaux.output)
 (deps (:input testfile-arrays030.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays030.expected 
     testfile-arrays030_cdcl_tableaux.output)))

(rule
 (target testfile-arrays030_cdcl.output)
 (deps (:input testfile-arrays030.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays030.expected 
     testfile-arrays030_cdcl.output)))

(rule
 (target testfile-arrays030_tableaux_cdcl.output)
 (deps (:input testfile-arrays030.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays030.expected 
     testfile-arrays030_tableaux_cdcl.output)))

(rule
 (target testfile-arrays030_tableaux.output)
 (deps (:input testfile-arrays030.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays030.expected 
     testfile-arrays030_tableaux.output)))

(rule
 (target testfile-arrays029_cdcl_tableaux.output)
 (deps (:input testfile-arrays029.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays029.expected 
     testfile-arrays029_cdcl_tableaux.output)))

(rule
 (target testfile-arrays029_cdcl.output)
 (deps (:input testfile-arrays029.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays029.expected 
     testfile-arrays029_cdcl.output)))

(rule
 (target testfile-arrays029_tableaux_cdcl.output)
 (deps (:input testfile-arrays029.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays029.expected 
     testfile-arrays029_tableaux_cdcl.output)))

(rule
 (target testfile-arrays029_tableaux.output)
 (deps (:input testfile-arrays029.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays029.expected 
     testfile-arrays029_tableaux.output)))

(rule
 (target testfile-arrays028_cdcl_tableaux.output)
 (deps (:input testfile-arrays028.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays028.expected 
     testfile-arrays028_cdcl_tableaux.output)))

(rule
 (target testfile-arrays028_cdcl.output)
 (deps (:input testfile-arrays028.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays028.expected 
     testfile-arrays028_cdcl.output)))

(rule
 (target testfile-arrays028_tableaux_cdcl.output)
 (deps (:input testfile-arrays028.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays028.expected 
     testfile-arrays028_tableaux_cdcl.output)))

(rule
 (target testfile-arrays028_tableaux.output)
 (deps (:input testfile-arrays028.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays028.expected 
     testfile-arrays028_tableaux.output)))

(rule
 (target testfile-arrays027_cdcl_tableaux.output)
 (deps (:input testfile-arrays027.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays027.expected 
     testfile-arrays027_cdcl_tableaux.output)))

(rule
 (target testfile-arrays027_cdcl.output)
 (deps (:input testfile-arrays027.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays027.expected 
     testfile-arrays027_cdcl.output)))

(rule
 (target testfile-arrays027_tableaux_cdcl.output)
 (deps (:input testfile-arrays027.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays027.expected 
     testfile-arrays027_tableaux_cdcl.output)))

(rule
 (target testfile-arrays027_tableaux.output)
 (deps (:input testfile-arrays027.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays027.expected 
     testfile-arrays027_tableaux.output)))

(rule
 (target testfile-arrays026_cdcl_tableaux.output)
 (deps (:input testfile-arrays026.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays026.expected 
     testfile-arrays026_cdcl_tableaux.output)))

(rule
 (target testfile-arrays026_cdcl.output)
 (deps (:input testfile-arrays026.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays026.expected 
     testfile-arrays026_cdcl.output)))

(rule
 (target testfile-arrays026_tableaux_cdcl.output)
 (deps (:input testfile-arrays026.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays026.expected 
     testfile-arrays026_tableaux_cdcl.output)))

(rule
 (target testfile-arrays026_tableaux.output)
 (deps (:input testfile-arrays026.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays026.expected 
     testfile-arrays026_tableaux.output)))

(rule
 (target testfile-arrays025_cdcl_tableaux.output)
 (deps (:input testfile-arrays025.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays025.expected 
     testfile-arrays025_cdcl_tableaux.output)))

(rule
 (target testfile-arrays025_cdcl.output)
 (deps (:input testfile-arrays025.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays025.expected 
     testfile-arrays025_cdcl.output)))

(rule
 (target testfile-arrays025_tableaux_cdcl.output)
 (deps (:input testfile-arrays025.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays025.expected 
     testfile-arrays025_tableaux_cdcl.output)))

(rule
 (target testfile-arrays025_tableaux.output)
 (deps (:input testfile-arrays025.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays025.expected 
     testfile-arrays025_tableaux.output)))

(rule
 (target testfile-arrays024_cdcl_tableaux.output)
 (deps (:input testfile-arrays024.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays024.expected 
     testfile-arrays024_cdcl_tableaux.output)))

(rule
 (target testfile-arrays024_cdcl.output)
 (deps (:input testfile-arrays024.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays024.expected 
     testfile-arrays024_cdcl.output)))

(rule
 (target testfile-arrays024_tableaux_cdcl.output)
 (deps (:input testfile-arrays024.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays024.expected 
     testfile-arrays024_tableaux_cdcl.output)))

(rule
 (target testfile-arrays024_tableaux.output)
 (deps (:input testfile-arrays024.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays024.expected 
     testfile-arrays024_tableaux.output)))

(rule
 (target testfile-arrays023_cdcl_tableaux.output)
 (deps (:input testfile-arrays023.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays023.expected 
     testfile-arrays023_cdcl_tableaux.output)))

(rule
 (target testfile-arrays023_cdcl.output)
 (deps (:input testfile-arrays023.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays023.expected 
     testfile-arrays023_cdcl.output)))

(rule
 (target testfile-arrays023_tableaux_cdcl.output)
 (deps (:input testfile-arrays023.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays023.expected 
     testfile-arrays023_tableaux_cdcl.output)))

(rule
 (target testfile-arrays023_tableaux.output)
 (deps (:input testfile-arrays023.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays023.expected 
     testfile-arrays023_tableaux.output)))

(rule
 (target testfile-arrays022_cdcl_tableaux.output)
 (deps (:input testfile-arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays022.expected 
     testfile-arrays022_cdcl_tableaux.output)))

(rule
 (target testfile-arrays022_cdcl.output)
 (deps (:input testfile-arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays022.expected 
     testfile-arrays022_cdcl.output)))

(rule
 (target testfile-arrays022_tableaux_cdcl.output)
 (deps (:input testfile-arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays022.expected 
     testfile-arrays022_tableaux_cdcl.output)))

(rule
 (target testfile-arrays022_tableaux.output)
 (deps (:input testfile-arrays022.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays022.expected 
     testfile-arrays022_tableaux.output)))

(rule
 (target testfile-arrays021_cdcl_tableaux.output)
 (deps (:input testfile-arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays021.expected 
     testfile-arrays021_cdcl_tableaux.output)))

(rule
 (target testfile-arrays021_cdcl.output)
 (deps (:input testfile-arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays021.expected 
     testfile-arrays021_cdcl.output)))

(rule
 (target testfile-arrays021_tableaux_cdcl.output)
 (deps (:input testfile-arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays021.expected 
     testfile-arrays021_tableaux_cdcl.output)))

(rule
 (target testfile-arrays021_tableaux.output)
 (deps (:input testfile-arrays021.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays021.expected 
     testfile-arrays021_tableaux.output)))

(rule
 (target testfile-arrays020_cdcl_tableaux.output)
 (deps (:input testfile-arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays020.expected 
     testfile-arrays020_cdcl_tableaux.output)))

(rule
 (target testfile-arrays020_cdcl.output)
 (deps (:input testfile-arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays020.expected 
     testfile-arrays020_cdcl.output)))

(rule
 (target testfile-arrays020_tableaux_cdcl.output)
 (deps (:input testfile-arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays020.expected 
     testfile-arrays020_tableaux_cdcl.output)))

(rule
 (target testfile-arrays020_tableaux.output)
 (deps (:input testfile-arrays020.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays020.expected 
     testfile-arrays020_tableaux.output)))

(rule
 (target testfile-arrays019_cdcl_tableaux.output)
 (deps (:input testfile-arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays019.expected 
     testfile-arrays019_cdcl_tableaux.output)))

(rule
 (target testfile-arrays019_cdcl.output)
 (deps (:input testfile-arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays019.expected 
     testfile-arrays019_cdcl.output)))

(rule
 (target testfile-arrays019_tableaux_cdcl.output)
 (deps (:input testfile-arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays019.expected 
     testfile-arrays019_tableaux_cdcl.output)))

(rule
 (target testfile-arrays019_tableaux.output)
 (deps (:input testfile-arrays019.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays019.expected 
     testfile-arrays019_tableaux.output)))

(rule
 (target testfile-arrays018_cdcl_tableaux.output)
 (deps (:input testfile-arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays018.expected 
     testfile-arrays018_cdcl_tableaux.output)))

(rule
 (target testfile-arrays018_cdcl.output)
 (deps (:input testfile-arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays018.expected 
     testfile-arrays018_cdcl.output)))

(rule
 (target testfile-arrays018_tableaux_cdcl.output)
 (deps (:input testfile-arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays018.expected 
     testfile-arrays018_tableaux_cdcl.output)))

(rule
 (target testfile-arrays018_tableaux.output)
 (deps (:input testfile-arrays018.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays018.expected 
     testfile-arrays018_tableaux.output)))

(rule
 (target testfile-arrays017_cdcl_tableaux.output)
 (deps (:input testfile-arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays017.expected 
     testfile-arrays017_cdcl_tableaux.output)))

(rule
 (target testfile-arrays017_cdcl.output)
 (deps (:input testfile-arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays017.expected 
     testfile-arrays017_cdcl.output)))

(rule
 (target testfile-arrays017_tableaux_cdcl.output)
 (deps (:input testfile-arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays017.expected 
     testfile-arrays017_tableaux_cdcl.output)))

(rule
 (target testfile-arrays017_tableaux.output)
 (deps (:input testfile-arrays017.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays017.expected 
     testfile-arrays017_tableaux.output)))

(rule
 (target testfile-arrays016_cdcl_tableaux.output)
 (deps (:input testfile-arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays016.expected 
     testfile-arrays016_cdcl_tableaux.output)))

(rule
 (target testfile-arrays016_cdcl.output)
 (deps (:input testfile-arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays016.expected 
     testfile-arrays016_cdcl.output)))

(rule
 (target testfile-arrays016_tableaux_cdcl.output)
 (deps (:input testfile-arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays016.expected 
     testfile-arrays016_tableaux_cdcl.output)))

(rule
 (target testfile-arrays016_tableaux.output)
 (deps (:input testfile-arrays016.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays016.expected 
     testfile-arrays016_tableaux.output)))

(rule
 (target testfile-arrays015_cdcl_tableaux.output)
 (deps (:input testfile-arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays015.expected 
     testfile-arrays015_cdcl_tableaux.output)))

(rule
 (target testfile-arrays015_cdcl.output)
 (deps (:input testfile-arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays015.expected 
     testfile-arrays015_cdcl.output)))

(rule
 (target testfile-arrays015_tableaux_cdcl.output)
 (deps (:input testfile-arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays015.expected 
     testfile-arrays015_tableaux_cdcl.output)))

(rule
 (target testfile-arrays015_tableaux.output)
 (deps (:input testfile-arrays015.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays015.expected 
     testfile-arrays015_tableaux.output)))

(rule
 (target testfile-arrays014_cdcl_tableaux.output)
 (deps (:input testfile-arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays014.expected 
     testfile-arrays014_cdcl_tableaux.output)))

(rule
 (target testfile-arrays014_cdcl.output)
 (deps (:input testfile-arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays014.expected 
     testfile-arrays014_cdcl.output)))

(rule
 (target testfile-arrays014_tableaux_cdcl.output)
 (deps (:input testfile-arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays014.expected 
     testfile-arrays014_tableaux_cdcl.output)))

(rule
 (target testfile-arrays014_tableaux.output)
 (deps (:input testfile-arrays014.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays014.expected 
     testfile-arrays014_tableaux.output)))

(rule
 (target testfile-arrays013_cdcl_tableaux.output)
 (deps (:input testfile-arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays013.expected 
     testfile-arrays013_cdcl_tableaux.output)))

(rule
 (target testfile-arrays013_cdcl.output)
 (deps (:input testfile-arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays013.expected 
     testfile-arrays013_cdcl.output)))

(rule
 (target testfile-arrays013_tableaux_cdcl.output)
 (deps (:input testfile-arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays013.expected 
     testfile-arrays013_tableaux_cdcl.output)))

(rule
 (target testfile-arrays013_tableaux.output)
 (deps (:input testfile-arrays013.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays013.expected 
     testfile-arrays013_tableaux.output)))

(rule
 (target testfile-arrays012_cdcl_tableaux.output)
 (deps (:input testfile-arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays012.expected 
     testfile-arrays012_cdcl_tableaux.output)))

(rule
 (target testfile-arrays012_cdcl.output)
 (deps (:input testfile-arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays012.expected 
     testfile-arrays012_cdcl.output)))

(rule
 (target testfile-arrays012_tableaux_cdcl.output)
 (deps (:input testfile-arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays012.expected 
     testfile-arrays012_tableaux_cdcl.output)))

(rule
 (target testfile-arrays012_tableaux.output)
 (deps (:input testfile-arrays012.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays012.expected 
     testfile-arrays012_tableaux.output)))

(rule
 (target testfile-arrays011_cdcl_tableaux.output)
 (deps (:input testfile-arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays011.expected 
     testfile-arrays011_cdcl_tableaux.output)))

(rule
 (target testfile-arrays011_cdcl.output)
 (deps (:input testfile-arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays011.expected 
     testfile-arrays011_cdcl.output)))

(rule
 (target testfile-arrays011_tableaux_cdcl.output)
 (deps (:input testfile-arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays011.expected 
     testfile-arrays011_tableaux_cdcl.output)))

(rule
 (target testfile-arrays011_tableaux.output)
 (deps (:input testfile-arrays011.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays011.expected 
     testfile-arrays011_tableaux.output)))

(rule
 (target testfile-arrays010_cdcl_tableaux.output)
 (deps (:input testfile-arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays010.expected 
     testfile-arrays010_cdcl_tableaux.output)))

(rule
 (target testfile-arrays010_cdcl.output)
 (deps (:input testfile-arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays010.expected 
     testfile-arrays010_cdcl.output)))

(rule
 (target testfile-arrays010_tableaux_cdcl.output)
 (deps (:input testfile-arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays010.expected 
     testfile-arrays010_tableaux_cdcl.output)))

(rule
 (target testfile-arrays010_tableaux.output)
 (deps (:input testfile-arrays010.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays010.expected 
     testfile-arrays010_tableaux.output)))

(rule
 (target testfile-arrays009_cdcl_tableaux.output)
 (deps (:input testfile-arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays009.expected 
     testfile-arrays009_cdcl_tableaux.output)))

(rule
 (target testfile-arrays009_cdcl.output)
 (deps (:input testfile-arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays009.expected 
     testfile-arrays009_cdcl.output)))

(rule
 (target testfile-arrays009_tableaux_cdcl.output)
 (deps (:input testfile-arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays009.expected 
     testfile-arrays009_tableaux_cdcl.output)))

(rule
 (target testfile-arrays009_tableaux.output)
 (deps (:input testfile-arrays009.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays009.expected 
     testfile-arrays009_tableaux.output)))

(rule
 (target testfile-arrays008_cdcl_tableaux.output)
 (deps (:input testfile-arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays008.expected 
     testfile-arrays008_cdcl_tableaux.output)))

(rule
 (target testfile-arrays008_cdcl.output)
 (deps (:input testfile-arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays008.expected 
     testfile-arrays008_cdcl.output)))

(rule
 (target testfile-arrays008_tableaux_cdcl.output)
 (deps (:input testfile-arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays008.expected 
     testfile-arrays008_tableaux_cdcl.output)))

(rule
 (target testfile-arrays008_tableaux.output)
 (deps (:input testfile-arrays008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays008.expected 
     testfile-arrays008_tableaux.output)))

(rule
 (target testfile-arrays007_cdcl_tableaux.output)
 (deps (:input testfile-arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays007.expected 
     testfile-arrays007_cdcl_tableaux.output)))

(rule
 (target testfile-arrays007_cdcl.output)
 (deps (:input testfile-arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays007.expected 
     testfile-arrays007_cdcl.output)))

(rule
 (target testfile-arrays007_tableaux_cdcl.output)
 (deps (:input testfile-arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays007.expected 
     testfile-arrays007_tableaux_cdcl.output)))

(rule
 (target testfile-arrays007_tableaux.output)
 (deps (:input testfile-arrays007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays007.expected 
     testfile-arrays007_tableaux.output)))

(rule
 (target testfile-arrays006_cdcl_tableaux.output)
 (deps (:input testfile-arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays006.expected 
     testfile-arrays006_cdcl_tableaux.output)))

(rule
 (target testfile-arrays006_cdcl.output)
 (deps (:input testfile-arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays006.expected 
     testfile-arrays006_cdcl.output)))

(rule
 (target testfile-arrays006_tableaux_cdcl.output)
 (deps (:input testfile-arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays006.expected 
     testfile-arrays006_tableaux_cdcl.output)))

(rule
 (target testfile-arrays006_tableaux.output)
 (deps (:input testfile-arrays006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays006.expected 
     testfile-arrays006_tableaux.output)))

(rule
 (target testfile-arrays005_cdcl_tableaux.output)
 (deps (:input testfile-arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays005.expected 
     testfile-arrays005_cdcl_tableaux.output)))

(rule
 (target testfile-arrays005_cdcl.output)
 (deps (:input testfile-arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays005.expected 
     testfile-arrays005_cdcl.output)))

(rule
 (target testfile-arrays005_tableaux_cdcl.output)
 (deps (:input testfile-arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays005.expected 
     testfile-arrays005_tableaux_cdcl.output)))

(rule
 (target testfile-arrays005_tableaux.output)
 (deps (:input testfile-arrays005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays005.expected 
     testfile-arrays005_tableaux.output)))

(rule
 (target testfile-arrays004_cdcl_tableaux.output)
 (deps (:input testfile-arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays004.expected 
     testfile-arrays004_cdcl_tableaux.output)))

(rule
 (target testfile-arrays004_cdcl.output)
 (deps (:input testfile-arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays004.expected 
     testfile-arrays004_cdcl.output)))

(rule
 (target testfile-arrays004_tableaux_cdcl.output)
 (deps (:input testfile-arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays004.expected 
     testfile-arrays004_tableaux_cdcl.output)))

(rule
 (target testfile-arrays004_tableaux.output)
 (deps (:input testfile-arrays004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays004.expected 
     testfile-arrays004_tableaux.output)))

(rule
 (target testfile-arrays003_cdcl_tableaux.output)
 (deps (:input testfile-arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays003.expected 
     testfile-arrays003_cdcl_tableaux.output)))

(rule
 (target testfile-arrays003_cdcl.output)
 (deps (:input testfile-arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays003.expected 
     testfile-arrays003_cdcl.output)))

(rule
 (target testfile-arrays003_tableaux_cdcl.output)
 (deps (:input testfile-arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays003.expected 
     testfile-arrays003_tableaux_cdcl.output)))

(rule
 (target testfile-arrays003_tableaux.output)
 (deps (:input testfile-arrays003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays003.expected 
     testfile-arrays003_tableaux.output)))

(rule
 (target testfile-arrays002_cdcl_tableaux.output)
 (deps (:input testfile-arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays002.expected 
     testfile-arrays002_cdcl_tableaux.output)))

(rule
 (target testfile-arrays002_cdcl.output)
 (deps (:input testfile-arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays002.expected 
     testfile-arrays002_cdcl.output)))

(rule
 (target testfile-arrays002_tableaux_cdcl.output)
 (deps (:input testfile-arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays002.expected 
     testfile-arrays002_tableaux_cdcl.output)))

(rule
 (target testfile-arrays002_tableaux.output)
 (deps (:input testfile-arrays002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays002.expected 
     testfile-arrays002_tableaux.output)))

(rule
 (target testfile-arrays001_cdcl_tableaux.output)
 (deps (:input testfile-arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays001.expected 
     testfile-arrays001_cdcl_tableaux.output)))

(rule
 (target testfile-arrays001_cdcl.output)
 (deps (:input testfile-arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays001.expected 
     testfile-arrays001_cdcl.output)))

(rule
 (target testfile-arrays001_tableaux_cdcl.output)
 (deps (:input testfile-arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays001.expected 
     testfile-arrays001_tableaux_cdcl.output)))

(rule
 (target testfile-arrays001_tableaux.output)
 (deps (:input testfile-arrays001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-arrays001.expected 
     testfile-arrays001_tableaux.output)))

(rule
 (target testfile-018_array_cdcl_tableaux.output)
 (deps (:input testfile-018_array.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-018_array.expected 
     testfile-018_array_cdcl_tableaux.output)))

(rule
 (target testfile-018_array_cdcl.output)
 (deps (:input testfile-018_array.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-018_array.expected 
     testfile-018_array_cdcl.output)))

(rule
 (target testfile-018_array_tableaux_cdcl.output)
 (deps (:input testfile-018_array.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-018_array.expected 
     testfile-018_array_tableaux_cdcl.output)))

(rule
 (target testfile-018_array_tableaux.output)
 (deps (:input testfile-018_array.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-018_array.expected 
     testfile-018_array_tableaux.output)))

(rule
 (target challenge-euf-arrays-with-ext__KO_cdcl_tableaux.output)
 (deps (:input challenge-euf-arrays-with-ext__KO.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff challenge-euf-arrays-with-ext__KO.expected 
     challenge-euf-arrays-with-ext__KO_cdcl_tableaux.output)))

(rule
 (target challenge-euf-arrays-with-ext__KO_cdcl.output)
 (deps (:input challenge-euf-arrays-with-ext__KO.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff challenge-euf-arrays-with-ext__KO.expected 
     challenge-euf-arrays-with-ext__KO_cdcl.output)))

(rule
 (target challenge-euf-arrays-with-ext__KO_tableaux_cdcl.output)
 (deps (:input challenge-euf-arrays-with-ext__KO.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff challenge-euf-arrays-with-ext__KO.expected 
     challenge-euf-arrays-with-ext__KO_tableaux_cdcl.output)))

(rule
 (target challenge-euf-arrays-with-ext__KO_tableaux.output)
 (deps (:input challenge-euf-arrays-with-ext__KO.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff challenge-euf-arrays-with-ext__KO.expected 
     challenge-euf-arrays-with-ext__KO_tableaux.output)))
; Auto-generated part end
