%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

deco : TYPE;

ty : TYPE;

sort: (ty, uni) -> deco;


int: ty;


int1: ty;


tb2t: (deco) -> INT;


t2tb: (INT) -> uni;


real: ty;


% Conv1
  ASSERT
  (FORALL (x : INT):PATTERN (sort(int1, t2tb(x))):  (tb2t(sort(int1, 
  t2tb(x))) = x));


% Conv2
  ASSERT
  (FORALL (x : uni):PATTERN (sort(int1, t2tb(tb2t(sort(int1, x))))):  (
  sort(int1, t2tb(tb2t(sort(int1, x)))) = sort(int1, x)));


pointer : TYPE;

pointer1: ty;


pointer2: ty;


tb2t1: (deco) -> pointer;


t2tb1: (pointer) -> uni;


% Conv1
  ASSERT
  (FORALL (x : pointer):PATTERN (sort(pointer2, t2tb1(x))):  (tb2t1(
  sort(pointer2, t2tb1(x))) = x));


% Conv2
  ASSERT
  (FORALL (x : uni):PATTERN (sort(pointer2, t2tb1(tb2t1(sort(pointer2,
  x))))):  (sort(pointer2, t2tb1(tb2t1(sort(pointer2, x)))) = sort(pointer2,
  x)));


t: (ty, ty) -> ty;


tb2t2: (deco) -> (ARRAY pointer OF pointer);


t2tb2: ((ARRAY pointer OF pointer)) -> uni;


% Conv1
  ASSERT
  (FORALL (x : (ARRAY pointer OF pointer)):PATTERN (sort(t(pointer2,
  pointer2), t2tb2(x))):  (tb2t2(sort(t(pointer2, pointer2), t2tb2(x))) = x));


% Conv2
  ASSERT
  (FORALL (x : uni):PATTERN (sort(t(pointer2, pointer2), t2tb2(tb2t2(sort(
  t(pointer2, pointer2), x))))):  (sort(t(pointer2, pointer2), t2tb2(tb2t2(
  sort(t(pointer2, pointer2), x)))) = sort(t(pointer2, pointer2), x)));






bool: ty;


True: uni;


False: uni;


match_bool: (deco, deco, deco) -> uni;


% match_bool_True
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni): (sort(a, match_bool(sort(bool, True), sort(a,
  z), sort(a, z1))) = sort(a, z))));


% match_bool_False
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni): (sort(a, match_bool(sort(bool, False), sort(a,
  z), sort(a, z1))) = sort(a, z1))));


index_bool: (deco) -> INT;


% index_bool_True
  ASSERT (index_bool(sort(bool, True)) = 0);


% index_bool_False
  ASSERT (index_bool(sort(bool, False)) = 1);


% bool_inversion
  ASSERT
  (FORALL (u : uni):
  ((sort(bool, u) = sort(bool, True)) OR (sort(bool, u) = sort(bool, False))));


andb: (deco, deco) -> uni;


% andb_def
  ASSERT
  (FORALL (x : uni):
  ((LET y = True IN
   ((LET x1 = True IN (sort(bool, andb(sort(bool, x1), sort(bool, y))) = 
    sort(bool, True)))
   AND (LET x2 = False IN (sort(bool, andb(sort(bool, x2), sort(bool, y))) = 
       sort(bool, False)))))
  AND (LET y = False IN (sort(bool, andb(sort(bool, x), sort(bool, y))) = 
      sort(bool, False)))));


orb: (deco, deco) -> uni;


% orb_def
  ASSERT
  (FORALL (x : uni):
  ((LET y = True IN (sort(bool, orb(sort(bool, x), sort(bool, y))) = 
   sort(bool, True)))
  AND (LET y = False IN
      ((LET x1 = True IN (sort(bool, orb(sort(bool, x1), sort(bool, y))) = 
       sort(bool, True)))
      AND (LET x2 = False IN (sort(bool, orb(sort(bool, x2), sort(bool,
          y))) = sort(bool, False)))))));


xorb: (deco, deco) -> uni;


% xorb_def
  ASSERT
  ((LET y = True IN
   ((LET x = True IN (sort(bool, xorb(sort(bool, x), sort(bool, y))) = 
    sort(bool, False)))
   AND (LET x = False IN (sort(bool, xorb(sort(bool, x), sort(bool, y))) = 
       sort(bool, True)))))
  AND (LET y = False IN
      ((LET x = True IN (sort(bool, xorb(sort(bool, x), sort(bool, y))) = 
       sort(bool, True)))
      AND (LET x = False IN (sort(bool, xorb(sort(bool, x), sort(bool,
          y))) = sort(bool, False))))));


notb: (deco) -> uni;


% notb_def
  ASSERT
  ((LET x = True IN (sort(bool, notb(sort(bool, x))) = sort(bool, False)))
  AND (LET x = False IN (sort(bool, notb(sort(bool, x))) = sort(bool, True))));


tuple0: ty;


Tuple0: uni;


% tuple0_inversion
  ASSERT (FORALL (u : uni): (sort(tuple0, u) = sort(tuple0, Tuple0)));


ignore: (deco) -> uni;


label_: ty;


at: (deco, deco) -> uni;


old: (deco) -> uni;


% CompatOrderMult
  ASSERT
  (FORALL (x : INT, y : INT, z : INT):
  ((x <= y) => ((0 <= z) => ((x * z) <= (y * z)))));


ref: (ty) -> ty;


get: (deco, deco) -> uni;


set: (deco, deco, deco) -> uni;


% Select_eq
  ASSERT
  (FORALL (m : (ARRAY pointer OF pointer)):
  (FORALL (a1 : pointer, a2 : pointer):
  (FORALL (b : pointer):PATTERN (((m WITH [a1] := b)[a2])): 
  ((a1 = a2) => (((m WITH [a1] := b)[a2]) = b)))));


% Select_eq
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (m : uni):
  (FORALL (a1 : uni, a2 : uni):
  (FORALL (b1 : uni):PATTERN (sort(b, get(sort(t(a, b), set(sort(t(a, b), m), 
  sort(a, a1), sort(b, b1))), sort(a, a2)))): 
  ((sort(a, a1) = sort(a, a2)) => (sort(b, get(sort(t(a, b), set(sort(t(a,
  b), m), sort(a, a1), sort(b, b1))), sort(a, a2))) = sort(b, b1)))))));


% Select_neq
  ASSERT
  (FORALL (m : (ARRAY pointer OF pointer)):
  (FORALL (a1 : pointer, a2 : pointer):
  (FORALL (b : pointer):PATTERN (((m WITH [a1] := b)[a2])): 
  ((NOT (a1 = a2)) => (((m WITH [a1] := b)[a2]) = (m[a2]))))));


% Select_neq
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (m : uni):
  (FORALL (a1 : uni, a2 : uni):
  (FORALL (b1 : uni):PATTERN (sort(b, get(sort(t(a, b), set(sort(t(a, b), m), 
  sort(a, a1), sort(b, b1))), sort(a, a2)))): 
  ((NOT (sort(a, a1) = sort(a, a2))) => (sort(b, get(sort(t(a, b), set(sort(
  t(a, b), m), sort(a, a1), sort(b, b1))), sort(a, a2))) = sort(b, get(sort(
  t(a, b), m), sort(a, a2)))))))));


create_const: (deco) -> uni;


% Const
  ASSERT
  (FORALL (b : pointer, a : pointer): ((tb2t2(sort(t(pointer2, pointer2), 
  create_const(sort(pointer2, t2tb1(b)))))[a]) = b));


% Const
  ASSERT
  (FORALL (b : ty, a : ty):
  (FORALL (b1 : uni, a1 : uni): (sort(b, get(sort(t(a, b), create_const(
  sort(b, b1))), sort(a, a1))) = sort(b, b1))));


null: pointer;


value: uni;


next: (ARRAY pointer OF pointer);


is_list: ((ARRAY pointer OF pointer), pointer) -> BOOLEAN;


% is_list_null
  ASSERT
  (FORALL (next1 : (ARRAY pointer OF pointer), p : pointer):
  ((p = null) => (is_list(next1, p))));


% is_list_next
  ASSERT
  (FORALL (next2 : (ARRAY pointer OF pointer), p : pointer):
  ((NOT (p = null)) => ((is_list(next2, (next2[p]))) => (is_list(next2, p)))));


% is_list_inversion
  ASSERT
  (FORALL (z : (ARRAY pointer OF pointer), z1 : pointer):
  ((is_list(z, z1))
  => ((EXISTS (next3 : (ARRAY pointer OF pointer)):
      ((z = next3) AND (z1 = null)))
     OR (EXISTS (next4 : (ARRAY pointer OF pointer), p : pointer):
        ((NOT (p = null))
        AND ((is_list(next4, (next4[p]))) AND ((z = next4) AND (z1 = p))))))));


ft: (ty) -> ty;


in_ft: (pointer, deco) -> BOOLEAN;


list_ft: ((ARRAY pointer OF pointer), pointer) -> uni;


% frame_list
  ASSERT
  (FORALL (next5 : (ARRAY pointer OF pointer), p : pointer, q : pointer,
  v : pointer):
  ((NOT (in_ft(q, sort(ft(pointer2), list_ft(next5, p)))))
  => ((is_list(next5, p)) => (is_list((next5 WITH [q] := v), p)))));


sep_node_list: ((ARRAY pointer OF pointer), pointer, pointer) -> BOOLEAN;


% sep_node_list_def
  ASSERT
  (FORALL (next6 : (ARRAY pointer OF pointer), p1 : pointer, p2 : pointer):
  ((sep_node_list(next6, p1, p2))
  <=> (NOT (in_ft(p1, sort(ft(pointer2), list_ft(next6, p2)))))));


% list_ft_node_null
  ASSERT
  (FORALL (next7 : (ARRAY pointer OF pointer), q : pointer, p : pointer):
  ((q = null) => (NOT (in_ft(p, sort(ft(pointer2), list_ft(next7, q)))))));


% list_ft_node_next
  ASSERT
  (FORALL (next8 : (ARRAY pointer OF pointer), q : pointer, p : pointer):
  ((NOT (q = null))
  => ((is_list(next8, (next8[q])))
     => ((in_ft(p, sort(ft(pointer2), list_ft(next8, (next8[q])))))
        => (in_ft(p, sort(ft(pointer2), list_ft(next8, q))))))));


% list_ft_node_next_inv
  ASSERT
  (FORALL (next9 : (ARRAY pointer OF pointer), q : pointer, p : pointer):
  ((NOT (q = null))
  => ((is_list(next9, (next9[q])))
     => ((NOT (q = p))
        => ((in_ft(p, sort(ft(pointer2), list_ft(next9, q)))) => (in_ft(p, 
           sort(ft(pointer2), list_ft(next9, (next9[q]))))))))));


% frame_list_ft
  ASSERT
  (FORALL (next10 : (ARRAY pointer OF pointer), p : pointer, q : pointer,
  v : pointer):
  ((NOT (in_ft(q, sort(ft(pointer2), list_ft(next10, p))))) => (sort(
  ft(pointer2), list_ft(next10, p)) = sort(ft(pointer2), 
  list_ft((next10 WITH [q] := v), p)))));


list_disj: (deco, (ARRAY pointer OF pointer), pointer) -> BOOLEAN;


% list_disj_null
  ASSERT
  (FORALL (ft1 : uni, next11 : (ARRAY pointer OF pointer), p : pointer):
  ((p = null) => (list_disj(sort(ft(pointer2), ft1), next11, p))));


% list_disj_next
  ASSERT
  (FORALL (ft2 : uni, next12 : (ARRAY pointer OF pointer), p : pointer):
  ((NOT (p = null))
  => ((is_list(next12, (next12[p])))
     => ((NOT (in_ft(p, sort(ft(pointer2), ft2))))
        => ((list_disj(sort(ft(pointer2), ft2), next12, (next12[p])))
           => (list_disj(sort(ft(pointer2), ft2), next12, p)))))));


% list_disj_inversion
  ASSERT
  (FORALL (z : uni, z1 : (ARRAY pointer OF pointer), z2 : pointer):
  ((list_disj(sort(ft(pointer2), z), z1, z2))
  => ((EXISTS (ft3 : uni, next13 : (ARRAY pointer OF pointer)):
      (((sort(ft(pointer2), z) = sort(ft(pointer2), ft3)) AND (z1 = next13))
      AND (z2 = null)))
     OR (EXISTS (ft4 : uni, next14 : (ARRAY pointer OF pointer),
        p : pointer):
        ((NOT (p = null))
        AND ((is_list(next14, (next14[p])))
            AND ((NOT (in_ft(p, sort(ft(pointer2), ft4))))
                AND ((list_disj(sort(ft(pointer2), ft4), next14,
                    (next14[p])))
                    AND (((sort(ft(pointer2), z) = sort(ft(pointer2), ft4))
                         AND (z1 = next14))
                        AND (z2 = p))))))))));


sep_list_list: ((ARRAY pointer OF pointer), pointer, pointer) -> BOOLEAN;


% sep_list_list_def
  ASSERT
  (FORALL (next15 : (ARRAY pointer OF pointer), p1 : pointer, p2 : pointer):
  ((sep_list_list(next15, p1, p2))
  <=> ((list_disj(sort(ft(pointer2), list_ft(next15, p1)), next15, p2))
      AND (list_disj(sort(ft(pointer2), list_ft(next15, p2)), next15, p1)))));


% list_ft_disj_null
  ASSERT
  (FORALL (next16 : (ARRAY pointer OF pointer), q : pointer, p : pointer):
  ((q = null) => (list_disj(sort(ft(pointer2), list_ft(next16, q)), next16,
  p))));


% list_ft_disj_next
  ASSERT
  (FORALL (next17 : (ARRAY pointer OF pointer), p : pointer, q : pointer):
  ((NOT (q = null))
  => ((is_list(next17, (next17[q])))
     => ((NOT (in_ft(q, sort(ft(pointer2), list_ft(next17, p)))))
        => ((NOT (q = p))
           => ((list_disj(sort(ft(pointer2), list_ft(next17, (next17[q]))),
              next17, p)) => (list_disj(sort(ft(pointer2), list_ft(next17,
              q)), next17, p))))))));


% list_ft_disj_next_inv
  ASSERT
  (FORALL (next18 : (ARRAY pointer OF pointer), p : pointer, q : pointer):
  ((NOT (q = null))
  => ((is_list(next18, (next18[q])))
     => ((list_disj(sort(ft(pointer2), list_ft(next18, q)), next18, p))
        => (list_disj(sort(ft(pointer2), list_ft(next18, (next18[q]))),
        next18, p))))));


% frame_list_disj
  ASSERT
  (FORALL (next19 : (ARRAY pointer OF pointer), p1 : pointer, p2 : pointer,
  q : pointer, v : pointer):
  ((NOT (in_ft(q, sort(ft(pointer2), list_ft(next19, p1)))))
  => ((NOT (in_ft(q, sort(ft(pointer2), list_ft(next19, p2)))))
     => ((list_disj(sort(ft(pointer2), list_ft(next19, p1)), next19, p2))
        => (list_disj(sort(ft(pointer2), list_ft((next19 WITH [q] := v),
        p1)), (next19 WITH [q] := v), p2))))));


% acyclic_list
  ASSERT
  (FORALL (next20 : (ARRAY pointer OF pointer), p : pointer):
  ((NOT (p = null))
  => ((is_list(next20, p)) => (sep_node_list(next20, p, (next20[p]))))));


QUERY
% WP_list_rev
 % File "examples/programs/list_rev.mlw", line 108, characters 6-14
  (FORALL (next21 : (ARRAY pointer OF pointer)):
  (FORALL (p : pointer):
  ((is_list(next21, p))
  => (FORALL (result : pointer):
     ((result = null)
     => (((is_list(next21, p))
         AND ((is_list(next21, result)) AND (sep_list_list(next21, p,
             result))))
        AND (FORALL (next22 : (ARRAY pointer OF pointer)):
            (FORALL (q : pointer):
            (FORALL (p1 : pointer):
            (((is_list(next22, p1))
             AND ((is_list(next22, q)) AND (sep_list_list(next22, p1, q))))
            => (FORALL (result1 : pointer):
               ((result1 = p1)
               => (IF (NOT (result1 = null))
                  THEN (FORALL (result2 : (ARRAY pointer OF pointer)):
                       ((result2 = next22)
                       => (FORALL (result3 : pointer):
                          ((result3 = p1)
                          => (FORALL (result4 : (ARRAY pointer OF pointer)):
                             ((result4 = next22)
                             => (FORALL (result5 : pointer):
                                ((result5 = p1)
                                => (FORALL (result6 : pointer):
                                   ((result6 = q)
                                   => (FORALL
                                      (next23 : (ARRAY pointer OF pointer)):
                                      ((next23 = (result4 WITH [result5] := result6))
                                      => (FORALL (result7 : pointer):
                                         ((result7 = p1)
                                         => (FORALL (q1 : pointer):
                                            ((q1 = result7)
                                            => (FORALL (p2 : pointer):
                                               ((p2 = (result2[result3]))
                                               => ((is_list(next23, p2))
                                                  AND ((is_list(next23, q1))
                                                      AND (sep_list_list(next23,
                                                      p2, q1))))))))))))))))))))))
                  ELSE (is_list(next22, q)) ENDIF)))))))))))));