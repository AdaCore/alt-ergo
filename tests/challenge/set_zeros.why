(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a


axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))


axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))


logic index_bool : bool -> int


axiom index_bool_True : (index_bool(true) = 0)


axiom index_bool_False : (index_bool(false) = 1)


axiom bool_inversion : (forall u:bool. ((u = true) or (u = false)))


function andb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, true,
  false), false)


function orb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  true, false))


function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))


function notb(x: bool) : bool = match_bool(x, false, true)


axiom tuple0_inversion : (forall u:unit. (u = void))


type unit1

logic ignore : 'a1 -> unit


type label_

logic at : 'a2, label_ -> 'a2


logic old : 'a3 -> 'a3


axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))


axiom Select_eq :
  (forall m:('a4,'b) farray.
  (forall a1:'a4. forall a2:'a4.
  (forall b:'b [((m[a1 <- b])[a2])]. ((a1 = a2) -> (((m[a1 <- b])[a2]) = b)))))


axiom Select_neq :
  (forall m:('a5,'b1) farray.
  (forall a1:'a5. forall a2:'a5.
  (forall b:'b1 [((m[a1 <- b])[a2])]. ((not (a1 = a2)) ->
  (((m[a1 <- b])[a2]) = (m[a2]))))))


logic const : 'b2 -> ('a6,'b2) farray


axiom Const : (forall b:'b3. forall a:'a7. ((const(b)[a]) = b))


type 'a8 array1

logic mk_array : int, (int,'a8) farray -> 'a8 array1


logic mk_array_proj_1 : 'a8 array1 -> int


axiom mk_array_proj_1_def :
  (forall u:int. forall u1:(int,'a8) farray. (mk_array_proj_1(mk_array(u,
  u1)) = u))


logic mk_array_proj_2 : 'a8 array1 -> (int,'a8) farray


axiom mk_array_proj_2_def :
  (forall u:int. forall u1:(int,'a8) farray. (mk_array_proj_2(mk_array(u,
  u1)) = u1))


axiom array_inversion :
  (forall u:'a8 array1. (u = mk_array(mk_array_proj_1(u),
  mk_array_proj_2(u))))


function elts(u: 'a8 array1) : (int,'a8) farray = mk_array_proj_2(u)


function length(u: 'a8 array1) : int = mk_array_proj_1(u)


function mixfix_lbrb(a: 'a9 array1, i: int) : 'a9 = (elts(a)[i])


function mixfix_lblsmnrb(a: 'a10 array1, i: int, v: 'a10) : 'a10 array1 =
  mk_array(mk_array_proj_1(a), (elts(a)[i <- v]))


goal WP_parameter_set_zeros :
  (forall a:int. ((0 <= (a - 1)) ->
  (forall a1:(int,int) farray.
  (forall i:int. (((0 <= i) and (i <= (a - 1))) ->
  ((forall j:int. (((0 <= j) and (j <  i)) -> ((a1[j]) = 0))) ->
  (((0 <= i) and (i <  a)) and
  (forall a2:(int,int) farray. ((a2 = (a1[i <- 0])) ->
  (forall j:int. (((0 <= j) and (j <  (i + 1))) -> ((a2[j]) = 0))))))))))))
