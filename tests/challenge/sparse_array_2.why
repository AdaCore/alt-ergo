(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
axiom tuple0_inversion : (forall u:unit. (u = void))


type unit1

type label

logic at : 'a, label -> 'a


logic old : 'a1 -> 'a1


logic match_bool : bool, 'a2, 'a2 -> 'a2


axiom match_bool_True :
  (forall z:'a2. forall z1:'a2. (match_bool(true, z, z1) = z))


axiom match_bool_False :
  (forall z:'a2. forall z1:'a2. (match_bool(false, z, z1) = z1))


logic index_bool : bool -> int


axiom index_bool_True : (index_bool(true) = 0)


axiom index_bool_False : (index_bool(false) = 1)


axiom bool_inversion : (forall u:bool. ((u = true) or (u = false)))


function andb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, true,
  false), false)


function orb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  true, false))


function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))


function notb(x: bool) : bool = match_bool(x, false, true)


axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))


axiom Select_eq :
  (forall m:('a3,'b) farray.
  (forall a1:'a3. forall a2:'a3.
  (forall b:'b [((m[a1 <- b])[a2])]. ((a1 = a2) -> (((m[a1 <- b])[a2]) = b)))))


axiom Select_neq :
  (forall m:('a4,'b1) farray.
  (forall a1:'a4. forall a2:'a4.
  (forall b:'b1 [((m[a1 <- b])[a2])]. ((not (a1 = a2)) ->
  (((m[a1 <- b])[a2]) = (m[a2]))))))


logic const : 'b2 -> ('a5,'b2) farray


axiom Const : (forall b:'b3. forall a:'a6. ((const(b)[a]) = b))


type 'a7 array1

logic mk_array : int, (int,'a7) farray -> 'a7 array1


logic mk_array_proj_1 : 'a7 array1 -> int


axiom mk_array_proj_1_def :
  (forall u:int. forall u1:(int,'a7) farray. (mk_array_proj_1(mk_array(u,
  u1)) = u))


logic mk_array_proj_2 : 'a7 array1 -> (int,'a7) farray


axiom mk_array_proj_2_def :
  (forall u:int. forall u1:(int,'a7) farray. (mk_array_proj_2(mk_array(u,
  u1)) = u1))


axiom array_inversion :
  (forall u:'a7 array1. (u = mk_array(mk_array_proj_1(u),
  mk_array_proj_2(u))))


function elts(u: 'a7 array1) : (int,'a7) farray = mk_array_proj_2(u)


function length(u: 'a7 array1) : int = mk_array_proj_1(u)


function get(a: 'a8 array1, i: int) : 'a8 = (elts(a)[i])


function set(a: 'a9 array1, i: int, v: 'a9) : 'a9 array1 =
  mk_array(mk_array_proj_1(a), (elts(a)[i <- v]))


type elt

logic default : elt


logic c1 : elt


logic c2 : elt


type sparse_array

logic mk_sparse_array : elt array1, int array1, int array1,
  int -> sparse_array


logic mk_sparse_array_proj_1 : sparse_array -> elt array1


axiom mk_sparse_array_proj_1_def :
  (forall u:elt array1. forall u1:int array1. forall u2:int array1.
  forall u3:int. (mk_sparse_array_proj_1(mk_sparse_array(u, u1, u2,
  u3)) = u))


logic mk_sparse_array_proj_2 : sparse_array -> int array1


axiom mk_sparse_array_proj_2_def :
  (forall u:elt array1. forall u1:int array1. forall u2:int array1.
  forall u3:int. (mk_sparse_array_proj_2(mk_sparse_array(u, u1, u2,
  u3)) = u1))


logic mk_sparse_array_proj_3 : sparse_array -> int array1


axiom mk_sparse_array_proj_3_def :
  (forall u:elt array1. forall u1:int array1. forall u2:int array1.
  forall u3:int. (mk_sparse_array_proj_3(mk_sparse_array(u, u1, u2,
  u3)) = u2))


logic mk_sparse_array_proj_4 : sparse_array -> int


axiom mk_sparse_array_proj_4_def :
  (forall u:elt array1. forall u1:int array1. forall u2:int array1.
  forall u3:int. (mk_sparse_array_proj_4(mk_sparse_array(u, u1, u2,
  u3)) = u3))


axiom sparse_array_inversion :
  (forall u:sparse_array. (u = mk_sparse_array(mk_sparse_array_proj_1(u),
  mk_sparse_array_proj_2(u), mk_sparse_array_proj_3(u),
  mk_sparse_array_proj_4(u))))


function back(u: sparse_array) : int array1 = mk_sparse_array_proj_3(u)


function card(u: sparse_array) : int = mk_sparse_array_proj_4(u)


function idx(u: sparse_array) : int array1 = mk_sparse_array_proj_2(u)


function val(u: sparse_array) : elt array1 = mk_sparse_array_proj_1(u)


function length1(a: sparse_array) : int = length(val(a))


predicate is_elt(a: sparse_array, i: int) = (((0 <= get(idx(a), i)) and
  (get(idx(a), i) <  card(a))) and (get(back(a), get(idx(a), i)) = i))

logic model : sparse_array, int -> elt


axiom model_def :
  (forall a:sparse_array. forall i:int. ((is_elt(a, i) -> (model(a,
  i) = get(val(a), i))) and ((not is_elt(a, i)) -> (model(a, i) = default))))


predicate sa_invariant(a: sparse_array) = ((((0 <= card(a)) and
  (card(a) <= length1(a))) and (length1(a) <= 1000)) and
  (((length(val(a)) = length(idx(a))) and
  (length(idx(a)) = length(back(a)))) and
  (forall i:int. (((0 <= i) and (i <  card(a))) -> (((0 <= get(back(a),
  i)) and (get(back(a), i) <  length1(a))) and (get(idx(a), get(back(a),
  i)) = i))))))

predicate permutation(n: int, a: int array1) =
  ((forall i:int. (((0 <= i) and (i <  n)) -> ((0 <= get(a, i)) and (get(a,
   i) <  n)))) and
  (forall i:int. forall j:int. ((((0 <= i) and (i <  j)) and (j <  n)) ->
  (not (get(a, i) = get(a, j))))))

logic dirichlet : int, int array1, int -> int


axiom Dirichlet :
  (forall n:int.
  (forall a:int array1. (permutation(n, a) ->
  (forall i:int. (((0 <= i) and (i <  n)) -> (((0 <= dirichlet(n, a, i)) and
  (dirichlet(n, a, i) <  n)) and (get(a, dirichlet(n, a, i)) = i)))))))


axiom Inter6 :
  (forall a:sparse_array. (sa_invariant(a) -> ((card(a) = length1(a)) ->
  (permutation(card(a), back(a)) and
  (forall i:int. (((0 <= i) and (i <  card(a))) -> ((get(idx(a),
  i) = dirichlet(card(a), back(a), i)) and is_elt(a, i))))))))


goal WP_parameter_harness : (((0 <= 10) and (10 <= 1000)) and
  (forall result:int. forall result1:(int,elt) farray. forall result2:int.
  forall result3:(int,int) farray. forall result4:int.
  forall result5:(int,int) farray. forall result6:int.
  ((sa_invariant(mk_sparse_array(mk_array(result, result1), mk_array(result2,
  result3), mk_array(result4, result5), result6)) and ((result6 = 0) and
  ((result = 10) and
  (forall i:int. (model(mk_sparse_array(mk_array(result, result1),
  mk_array(result2, result3), mk_array(result4, result5), result6),
  i) = default))))) -> (((0 <= 20) and (20 <= 1000)) and
  (forall result7:int. forall result8:(int,elt) farray. forall result9:int.
  forall result10:(int,int) farray. forall result11:int.
  forall result12:(int,int) farray. forall result13:int.
  ((sa_invariant(mk_sparse_array(mk_array(result7, result8),
  mk_array(result9, result10), mk_array(result11, result12), result13)) and
  ((result13 = 0) and ((result7 = 20) and
  (forall i:int. (model(mk_sparse_array(mk_array(result7, result8),
  mk_array(result9, result10), mk_array(result11, result12), result13),
  i) = default))))) -> ((((0 <= 5) and (5 <  result)) and
  sa_invariant(mk_sparse_array(mk_array(result, result1), mk_array(result2,
  result3), mk_array(result4, result5), result6))) and
  ((model(mk_sparse_array(mk_array(result, result1), mk_array(result2,
  result3), mk_array(result4, result5), result6), 5) = default) and
  ((((0 <= 7) and (7 <  result7)) and
  sa_invariant(mk_sparse_array(mk_array(result7, result8), mk_array(result9,
  result10), mk_array(result11, result12), result13))) and
  ((model(mk_sparse_array(mk_array(result7, result8), mk_array(result9,
  result10), mk_array(result11, result12), result13), 7) = default) and
  ((((0 <= 5) and (5 <  result)) and
  sa_invariant(mk_sparse_array(mk_array(result, result1), mk_array(result2,
  result3), mk_array(result4, result5), result6))) and
  (forall fresh:int.
  (forall fresh1:(int,int) farray.
  (forall fresh2:(int,int) farray.
  (forall fresh3:(int,elt) farray.
  ((sa_invariant(mk_sparse_array(mk_array(result, fresh3), mk_array(result2,
  fresh2), mk_array(result4, fresh1), fresh)) and
  ((model(mk_sparse_array(mk_array(result, fresh3), mk_array(result2,
  fresh2), mk_array(result4, fresh1), fresh), 5) = c1) and
  (forall j:int. ((not (j = 5)) -> (model(mk_sparse_array(mk_array(result,
  fresh3), mk_array(result2, fresh2), mk_array(result4, fresh1), fresh),
  j) = model(mk_sparse_array(mk_array(result, result1), mk_array(result2,
  result3), mk_array(result4, result5), result6), j)))))) -> ((((0 <= 7) and
  (7 <  result7)) and sa_invariant(mk_sparse_array(mk_array(result7,
  result8), mk_array(result9, result10), mk_array(result11, result12),
  result13))) and
  (forall fresh4:int.
  (forall fresh5:(int,int) farray.
  (forall fresh6:(int,int) farray.
  (forall fresh7:(int,elt) farray.
  ((sa_invariant(mk_sparse_array(mk_array(result7, fresh7), mk_array(result9,
  fresh6), mk_array(result11, fresh5), fresh4)) and
  ((model(mk_sparse_array(mk_array(result7, fresh7), mk_array(result9,
  fresh6), mk_array(result11, fresh5), fresh4), 7) = c2) and
  (forall j:int. ((not (j = 7)) -> (model(mk_sparse_array(mk_array(result7,
  fresh7), mk_array(result9, fresh6), mk_array(result11, fresh5), fresh4),
  j) = model(mk_sparse_array(mk_array(result7, result8), mk_array(result9,
  result10), mk_array(result11, result12), result13), j)))))) ->
  ((((0 <= 5) and (5 <  result)) and
  sa_invariant(mk_sparse_array(mk_array(result, fresh3), mk_array(result2,
  fresh2), mk_array(result4, fresh1), fresh))) and
  ((model(mk_sparse_array(mk_array(result, fresh3), mk_array(result2,
  fresh2), mk_array(result4, fresh1), fresh), 5) = c1) and ((((0 <= 7) and
  (7 <  result7)) and sa_invariant(mk_sparse_array(mk_array(result7, fresh7),
  mk_array(result9, fresh6), mk_array(result11, fresh5), fresh4))) and
  ((model(mk_sparse_array(mk_array(result7, fresh7), mk_array(result9,
  fresh6), mk_array(result11, fresh5), fresh4), 7) = c2) and ((((0 <= 7) and
  (7 <  result)) and sa_invariant(mk_sparse_array(mk_array(result, fresh3),
  mk_array(result2, fresh2), mk_array(result4, fresh1), fresh))) and
  ((model(mk_sparse_array(mk_array(result, fresh3), mk_array(result2,
  fresh2), mk_array(result4, fresh1), fresh), 7) = default) and
  ((((0 <= 5) and (5 <  result7)) and
  sa_invariant(mk_sparse_array(mk_array(result7, fresh7), mk_array(result9,
  fresh6), mk_array(result11, fresh5), fresh4))) and
  ((model(mk_sparse_array(mk_array(result7, fresh7), mk_array(result9,
  fresh6), mk_array(result11, fresh5), fresh4), 5) = default) and
  ((((0 <= 0) and (0 <  result)) and
  sa_invariant(mk_sparse_array(mk_array(result, fresh3), mk_array(result2,
  fresh2), mk_array(result4, fresh1), fresh))) and
  ((model(mk_sparse_array(mk_array(result, fresh3), mk_array(result2,
  fresh2), mk_array(result4, fresh1), fresh), 0) = default) and
  ((((0 <= 0) and (0 <  result7)) and
  sa_invariant(mk_sparse_array(mk_array(result7, fresh7), mk_array(result9,
  fresh6), mk_array(result11, fresh5), fresh4))) and
  (model(mk_sparse_array(mk_array(result7, fresh7), mk_array(result9,
  fresh6), mk_array(result11, fresh5), fresh4), 0) = default))))))))))))))))))))))))))))))))))
