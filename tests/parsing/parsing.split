$$$empty
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique d'un fichier vide.
$exi:TR-Lexical-file
$res:Correct
$

		    

$$$integer
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des formules sur les entiers.

Le test vérifie que \verb|=| est bien reconnu comme opérateur et que la formule est bien une expression.

$obj:Le test vérifie que \verb|0| est bien reconnu par la règle \textlangle integer\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g1: 0=0

$obj:Le test vérifie que \verb|12| est bien reconnu par la règle \textlangle integer\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g2 : 12=0

$obj:Le test vérifie que \verb|56987568993528| est bien reconnu par la règle \textlangle integer\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g3 : 56987568993528 = 0

$$$real
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des formules sur les réels.

Le test vérifie que \verb|=| est bien reconnu comme opérateur et que la formule est bien une expression.


$obj:Le test vérifie que \verb|0.| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
goal g1 : 0=0.

$obj:Le test vérifie que \verb|2.000| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g2 : 0=2.000

$obj:Le test vérifie que \verb|35.| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g3 : 0=35.

$obj:Le test vérifie que \verb|10.236| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g4 : 0=10.236

$obj:Le test vérifie que \verb|000012.| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g5 : 0=000012.

$obj:Le test vérifie que \verb|.5| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g6 : 0=.5

$obj:Le test vérifie que \verb|42e+1| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-exponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g7 : 0=42e+1

$obj:Le test vérifie que \verb|42E-156| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-exponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g8 : 0=42E-156

$obj:Le test vérifie que \verb|42.00000001e+10| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-digit,TR-Lexical-exponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g9 : 0=42.00000001e+10

$$$real_hexa
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des formules sur des réels hexadécimaux.

Le test vérifie aussi que \verb|=| est bien reconnu comme opérateur et que la formule est bien une expression.


$obj:Le test vérifie que \verb|0xeep1| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-hexa,TR-Lexical-hexponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g1 : 0=0xeep1

$obj:Le test vérifie que \verb|0xeep1| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-hexa,TR-Lexical-hexponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g2 : 0=0x12P61

$obj:Le test vérifie que \verb|0x11fCC.2bDe90P975| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-hexa,TR-Lexical-hexponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g3 : 0=0x11fCC.2bDe90P975

$obj:Le test vérifie que \verb|0x5e23.p+96| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-hexa,TR-Lexical-hexponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g4 : 0=0x5e23.p+96

$obj:Le test vérifie que \verb|0x3a.P-0| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-hexa,TR-Lexical-hexponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g5 : 0=0x3a.P-0

$obj:Le test vérifie que \verb|0x369a8E4dDf96.00000p-99936| est bien reconnu par la règle \textlangle real\textrangle .
$exi:TR-Lexical-hexa,TR-Lexical-hexponent,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g6 : 0=0x369a8E4dDf96.00000p-99936



$$$identifier
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des formules avec des identificateurs.

Le test vérifie aussi que \verb|=| est bien reconnu comme opérateur et que la formule est bien une expression.


$obj:Le test vérifie que \verb|x| est bien reconnu par la règle \textlangle identifier\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g1 : 0=x

$obj:Le test vérifie que \verb|x__| est bien reconnu par la règle \textlangle identifier\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g2 : 0=x__

$obj:Le test vérifie que \verb|x028_'_| est bien reconnu par la règle \textlangle identifier\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g3 : 0=x028_'_

$obj:Le test vérifie que \verb|a5__''| est bien reconnu par la règle \textlangle identifier\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g4 : 0=a5__''

$obj:Le test vérifie que \verb|tr'''uc'| est bien reconnu par la règle \textlangle identifier\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-operator,TR-Lexical-constant,TR-Lexical-expr
$res:Correct
$
goal g5 : 0=tr'''uc'


$$$type
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des déclarations de type.

Le test vérifie aussi que \verb|type| est bien reconnu comme mot clef et que le fichier contient une déclaration correcte.



$obj:Le test vérifie que \verb|type a| est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-decl
$res:Correct
$
type a

$obj:Le test vérifie que \verb|type a0'b'__'_8| est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-decl
$res:Correct
$
type a0'b'__'_8

$obj:Le test vérifie que \verb|type 'a t| est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-type-parameters,TR-Lexical-var-type,TR-Lexical-decl
$res:Correct
$
type 'a t

$obj:Le test vérifie que \verb|type ('a , 'c, 'b_43) t| est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-type-parameters,TR-Lexical-var-type,TR-Lexical-decl
$res:Correct
$
type ('a , 'c, 'b_43) t

$obj:Le test vérifie que \verb|type ('super'''type, 'x_          , 's) nouveau_type| est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-type-parameters,TR-Lexical-var-type,TR-Lexical-decl
$res:Correct
$
type ('super'''type, 'x_          , 's) nouveau_type

$obj:Le test vérifie que \verb|type ('a) t| est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-type-parameters,TR-Lexical-var-type,TR-Lexical-decl
$res:Correct
$
type ('a) t




$$$logic
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des déclarations de symboles logiques.

Le test vérifie aussi que \verb|logic| est bien reconnu comme mot clef et que le fichier contient une déclaration correcte.


$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic infaillible1 : prop

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic encore_plus_'infaillible'2 : real

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic ca_va_rater3 : (int, bool, 'a, b, real, bitv[125]) t -> m

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic ac retest4 : a_'_bidule -> prop

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic gic5 : ('d'''', 'genre t, (int, x) t, ('a) t) x 
      	  -> prop

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic gic6 : (x) x , g, int -> unit

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic ac qui_marche7 : (int, bool, unit, real, bitv[0002598], asppro'p_, 'i''', 'primident identifier, (bool, 'a, b) id, (int, ('a) t) x) truc_'_alafin -> prop

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic brouillon, sale, moche, bea__8'k : ((real, bool) t, 'a truc, bitv[0] , ((x) x, y, 'y') x) s, int, 'abool, bool, x x 

        ->    ('q , unit, bool ,s) machin

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic l : ('a) h -> t

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle  et que \verb|LOGIC| n'est pas reconnu comme mot clef.
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic LOGIC : t -> ('a) h

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle  et que \verb|Logic| n'est pas reconnu comme mot clef.
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic Logic : int -> 'a

$obj:Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle  et que \verb|LoGic| n'est pas reconnu comme mot clef.
$exi:TR-Lexical-keywords,TR-Lexical-primitive-type,TR-Lexical-decl
$res:Correct
$
logic loGic : 'a -> int



$$$expr
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des expressions.

Le test vérifie que l'expression est bien reconnu par la règle \textlangle expr\textrangle .

$exi:TR-Lexical-integer,TR-Lexical-expr
$res:Correct
$
goal g1 : 1

$exi:TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g2 : 1+a

$exi:TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g3 : X-y

$exi:TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g4 : -r * 2568

$exi:TR-Lexical-keyword,TR-Lexical-operator,TR-Lexical-expr
$res:Correct
$
goal g5 : true / false

$exi:TR-Lexical-real,TR-Lexical-operator,TR-Lexical-keyword,TR-Lexical-expr
$res:Correct
$
goal g6 : void  % 125.09

$exi:TR-Lexical-keyword,TR-Lexical-operator,TR-Lexical-expr
$res:Correct
$
goal g7 : true and false

$exi:TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g8 : x or 0

$exi:TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g9 : 1 <-> 999999

$exi:TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g10 :truc_ -> 12

$exi:TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-expr
$res:Correct
$
goal g11:      0= 1 = 2 =3

$exi:TR-Lexical-integer,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g12 : r_y <> 8 + 0 /1 < x @ 12.12

$exi:TR-Lexical-integer,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g13 : f <= u = 4 > 6

$exi:TR-Lexical-integer,TR-Lexical-real,TR-Lexical-operator,TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g14 : g >= p * (3) - (125@0%0) and  0x125.AB8p-98+1-2

$exi:TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g15 : machin : truc : bidule : if a then b else c

$exi:TR-Lexical-constant,TR-Lexical-operator,TR-Lexical-string,TR-Lexical-expr
$res:Correct
$
goal g16 : "chaine" : 0+1


$$$ite
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des expressions \verb|if then else|.

Le test vérifie que l'expression est bien reconnu par la règle \textlangle expr\textrangle .

$exi:TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g1 : if a then b else c

$exi:TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g2 : if 1+9 = 0 then end_of_the_world else create(universe)

$exi:TR-Lexical-identifier,TR-Lexical-string,TR-Lexical-expr
$res:Correct
$
goal g3 : if (if a then b else c) then "guillemets":u or g else if 0 then just_do_it else not aaaargh''

$exi:TR-Lexical-identifier,TR-Lexical-expr
$res:Correct
$
goal g4 : if f((not x), x) then  a + b else exists x : int . 0

$$$forall
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des expressions avec des quantificateurs universels \verb|forall|.

Le test vérifie que l'expression est bien reconnu par la règle \textlangle expr\textrangle .


$exi:TR-Lexical-identifier,TR-Lexical-keywords,TR-Lexical-expr
$res:Correct
$
goal g1 : forall x : int . x

$exi:TR-Lexical-identifier,TR-Lexical-primitive-type,TR-Lexical-expr
$res:Correct
$
goal g2 : forall x,y,z : ('a,'b) t . x+y = 3 - z%0x9bp-2


$obj:Le test vérifie que les déclencheurs écrits par l'utilisateur sont bien reconnu par la règle \textlangle triggers\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-triggers,TR-Lexical-primitive-type,TR-Lexical-expr
$res:Correct
$
goal g3 : forall x,y,z : ('a) t [1+2, if a then b else c] . x

$obj:Le test vérifie que les déclencheurs écrits par l'utilisateur sont bien reconnu par la règle \textlangle triggers\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-bitv,TR-Lexical-triggers,TR-Lexical-primitive-type,TR-Lexical-expr
$res:Correct
$
goal g4 : forall x,y : a a [0|1,-1@cc | void ].(if 0 then 1^{1,1} else -1)

$obj:Le test vérifie que les déclencheurs écrits par l'utilisateur sont bien reconnu par la règle \textlangle triggers\textrangle .
$exi:TR-Lexical-identifier,TR-Lexical-triggers,TR-Lexical-primitive-type,TR-Lexical-expr
$res:Correct
$
goal g5 : forall x,y : ('a t) t [zero,not x, f(0)|s|a,b:(t)].g ()

$$$exists
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des expressions avec des quantificateurs existentiels \verb|exists|.

Le test vérifie que l'expression est bien reconnu par la règle \textlangle expr\textrangle .


$exi:TR-Lexical-identifier,TR-Lexical-keywords,TR-Lexical-expr
$res:Correct
$
$
goal g1 : exists x : int . x

$exi:TR-Lexical-identifier,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr
$res:Correct
$
goal g2 : exists truc : ('a,'b) t . x+y = 3 - z%0x9bp-2

$exi:TR-Lexical-identifier,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr
$res:Correct
$
goal g3 : exists x : ('a) t  . x

$exi:TR-Lexical-identifier,TR-Lexical-bitv,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr
$res:Correct
$
goal g4 : exists x : a a .(if 0 then 1^{1,1} else -1)

$exi:TR-Lexical-identifier,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr
$res:Correct
$
goal g5 : exists x : ('a t) t .g ()



$$$function
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des déclarations de fonctions.

Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .


$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
function f1 () : unit = 0

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-bitv,TR-Lexical-string,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
function bidule2 (x : int) : bitv[5] =
	 ( not ( id (x,u, "string" : [|001011|]) ) )

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-bitv,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
function f3 ( y: 'a t,s':s) : ((r,u)w,p,unit) x =
	 (y <> s) % ([|1111|]^{45,3})

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
function f4 (x:('a,'b) t, y:t) : s = forall a,b,c : int . a+B+C

$$$predicate
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir des déclarations de predicats.

Le test vérifie que la déclaration est bien reconnu par la règle \textlangle decl\textrangle .


$exi:TR-Lexical-identifier,TR-Lexical-keywords,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
predicate p1 () = 0

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
predicate p2 (a:int)  = 0


$exi:TR-Lexical-identifier,TR-Lexical-keywords,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
predicate p3 = a+b = 2 =-1

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-bitv,TR-Lexical-string,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
predicate p4 (x : int)  =
	 ( not ( id (x,u, "string" : [|001011|]) ) )

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-bitv,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
predicate p5 ( y: 'a t,s':s)  =
	 (y <> s) % ([|1111|]^{45,3})

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
predicate p6 (x:('a,'b) t, y:t)  = forall a,b,c : int . a+B+C

$$$declarations
$cobj:La fonctionnalité à vérifier est que Alt-Ergo est capable de réaliser l'analyse lexicale et syntaxique de fichiers faisant intervenir plusieurs déclarations.

Le test vérifie que les déclarations sont bien reconnues par la règle \textlangle decl\textrangle .



$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
type t
axiom a1 : 0
function f (x:int) : bool = true
logic ac aclogic_, ablogic : t

$exi:TR-Lexical-identifier,TR-Lexical-logic-binder,TR-Lexical-var-type,TR-Lexical-primitive-type,TR-Lexical-keywords,TR-Lexical-constant,TR-Lexical-triggers,TR-Lexical-operator,TR-Lexical-string,TR-Lexical-expr,TR-Lexical-decl
$res:Correct
$
axiom a2 : forall x,y : ('a ,'b) t [true|false]. x+y = y-x
function fff'f (x: ('a,a,s) t, y:unit) : bitv[100] vector =
	 forall x,y : a a [0|1,-1@cc | void ].
	 if (if a then b else c) 
	    then "guillemets":u or g 
	    else 
	    	 if 0 
		    then just_do_it 
		    else not aaaargh''
predicate p6_'__ (x:('a,'b) t, y:t)  = 
	  forall a,b,c : int . a+B+C
logic ac qui_marche7 : (int, bool, unit, real, bitv[0002598], 
      asppro'p_, 'i''', 'primident identifier, 
      (bool, 'a, b) id, (int, ('a) t) x) truc_'_alafin -> 
      (unit) u
goal g : exists x : a a a a a a a .
       	   (forall o:int [s,u|f].if 0 then 1^{1,1} else -1)



 



 