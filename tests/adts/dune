; File auto-generated by gentests

; Auto-generated part begin
(rule
 (target useless-patterns-vars_cdcl_tableaux.output)
 (deps (:input useless-patterns-vars.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-patterns-vars.expected 
      useless-patterns-vars_cdcl_tableaux.output)))

(rule
 (target useless-patterns-vars_cdcl.output)
 (deps (:input useless-patterns-vars.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-patterns-vars.expected 
      useless-patterns-vars_cdcl.output)))

(rule
 (target useless-patterns-vars_tableaux_cdcl.output)
 (deps (:input useless-patterns-vars.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-patterns-vars.expected 
      useless-patterns-vars_tableaux_cdcl.output)))

(rule
 (target useless-patterns-vars_tableaux.output)
 (deps (:input useless-patterns-vars.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-patterns-vars.expected 
      useless-patterns-vars_tableaux.output)))

(rule
 (target useless-mutual-records-as-adts_cdcl_tableaux.output)
 (deps (:input useless-mutual-records-as-adts.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-mutual-records-as-adts.expected 
      useless-mutual-records-as-adts_cdcl_tableaux.output)))

(rule
 (target useless-mutual-records-as-adts_cdcl.output)
 (deps (:input useless-mutual-records-as-adts.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-mutual-records-as-adts.expected 
      useless-mutual-records-as-adts_cdcl.output)))

(rule
 (target useless-mutual-records-as-adts_tableaux_cdcl.output)
 (deps (:input useless-mutual-records-as-adts.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-mutual-records-as-adts.expected 
      useless-mutual-records-as-adts_tableaux_cdcl.output)))

(rule
 (target useless-mutual-records-as-adts_tableaux.output)
 (deps (:input useless-mutual-records-as-adts.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff useless-mutual-records-as-adts.expected 
      useless-mutual-records-as-adts_tableaux.output)))

(rule
 (target typecheck_warning-unused-pattern_cdcl_tableaux.output)
 (deps (:input typecheck_warning-unused-pattern.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff typecheck_warning-unused-pattern.expected 
      typecheck_warning-unused-pattern_cdcl_tableaux.output)))

(rule
 (target typecheck_warning-unused-pattern_cdcl.output)
 (deps (:input typecheck_warning-unused-pattern.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff typecheck_warning-unused-pattern.expected 
      typecheck_warning-unused-pattern_cdcl.output)))

(rule
 (target typecheck_warning-unused-pattern_tableaux_cdcl.output)
 (deps (:input typecheck_warning-unused-pattern.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff typecheck_warning-unused-pattern.expected 
      typecheck_warning-unused-pattern_tableaux_cdcl.output)))

(rule
 (target typecheck_warning-unused-pattern_tableaux.output)
 (deps (:input typecheck_warning-unused-pattern.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff typecheck_warning-unused-pattern.expected 
      typecheck_warning-unused-pattern_tableaux.output)))

(rule
 (target tester_selector_cdcl_tableaux.output)
 (deps (:input tester_selector.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff tester_selector.expected 
      tester_selector_cdcl_tableaux.output)))

(rule
 (target tester_selector_cdcl.output)
 (deps (:input tester_selector.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff tester_selector.expected 
      tester_selector_cdcl.output)))

(rule
 (target tester_selector_tableaux_cdcl.output)
 (deps (:input tester_selector.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff tester_selector.expected 
      tester_selector_tableaux_cdcl.output)))

(rule
 (target tester_selector_tableaux.output)
 (deps (:input tester_selector.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff tester_selector.expected 
      tester_selector_tableaux.output)))

(rule
 (target simple_invalid_cdcl_tableaux.output)
 (deps (:input simple_invalid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_invalid.expected 
      simple_invalid_cdcl_tableaux.output)))

(rule
 (target simple_invalid_cdcl.output)
 (deps (:input simple_invalid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_invalid.expected 
      simple_invalid_cdcl.output)))

(rule
 (target simple_invalid_tableaux_cdcl.output)
 (deps (:input simple_invalid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_invalid.expected 
      simple_invalid_tableaux_cdcl.output)))

(rule
 (target simple_invalid_tableaux.output)
 (deps (:input simple_invalid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_invalid.expected 
      simple_invalid_tableaux.output)))

(rule
 (target simple_1_cdcl_tableaux.output)
 (deps (:input simple_1.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_1.expected 
      simple_1_cdcl_tableaux.output)))

(rule
 (target simple_1_cdcl.output)
 (deps (:input simple_1.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_1.expected 
      simple_1_cdcl.output)))

(rule
 (target simple_1_tableaux_cdcl.output)
 (deps (:input simple_1.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_1.expected 
      simple_1_tableaux_cdcl.output)))

(rule
 (target simple_1_tableaux.output)
 (deps (:input simple_1.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_1.expected 
      simple_1_tableaux.output)))

(rule
 (target simple_0_cdcl_tableaux.output)
 (deps (:input simple_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_0.expected 
      simple_0_cdcl_tableaux.output)))

(rule
 (target simple_0_cdcl.output)
 (deps (:input simple_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_0.expected 
      simple_0_cdcl.output)))

(rule
 (target simple_0_tableaux_cdcl.output)
 (deps (:input simple_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_0.expected 
      simple_0_tableaux_cdcl.output)))

(rule
 (target simple_0_tableaux.output)
 (deps (:input simple_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple_0.expected 
      simple_0_tableaux.output)))

(rule
 (target simple-valid_cdcl_tableaux.output)
 (deps (:input simple-valid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple-valid.expected 
      simple-valid_cdcl_tableaux.output)))

(rule
 (target simple-valid_cdcl.output)
 (deps (:input simple-valid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple-valid.expected 
      simple-valid_cdcl.output)))

(rule
 (target simple-valid_tableaux_cdcl.output)
 (deps (:input simple-valid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple-valid.expected 
      simple-valid_tableaux_cdcl.output)))

(rule
 (target simple-valid_tableaux.output)
 (deps (:input simple-valid.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff simple-valid.expected 
      simple-valid_tableaux.output)))

(rule
 (target record-defined-as-adt+projection_cdcl_tableaux.output)
 (deps (:input record-defined-as-adt+projection.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff record-defined-as-adt+projection.expected 
      record-defined-as-adt+projection_cdcl_tableaux.output)))

(rule
 (target record-defined-as-adt+projection_cdcl.output)
 (deps (:input record-defined-as-adt+projection.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff record-defined-as-adt+projection.expected 
      record-defined-as-adt+projection_cdcl.output)))

(rule
 (target record-defined-as-adt+projection_tableaux_cdcl.output)
 (deps (:input record-defined-as-adt+projection.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff record-defined-as-adt+projection.expected 
      record-defined-as-adt+projection_tableaux_cdcl.output)))

(rule
 (target record-defined-as-adt+projection_tableaux.output)
 (deps (:input record-defined-as-adt+projection.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff record-defined-as-adt+projection.expected 
      record-defined-as-adt+projection_tableaux.output)))

(rule
 (target mutually_recursive_typechecks_cdcl_tableaux.output)
 (deps (:input mutually_recursive_typechecks.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_typechecks.expected 
      mutually_recursive_typechecks_cdcl_tableaux.output)))

(rule
 (target mutually_recursive_typechecks_cdcl.output)
 (deps (:input mutually_recursive_typechecks.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_typechecks.expected 
      mutually_recursive_typechecks_cdcl.output)))

(rule
 (target mutually_recursive_typechecks_tableaux_cdcl.output)
 (deps (:input mutually_recursive_typechecks.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_typechecks.expected 
      mutually_recursive_typechecks_tableaux_cdcl.output)))

(rule
 (target mutually_recursive_typechecks_tableaux.output)
 (deps (:input mutually_recursive_typechecks.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_typechecks.expected 
      mutually_recursive_typechecks_tableaux.output)))

(rule
 (target mutually_recursive_6_cdcl_tableaux.output)
 (deps (:input mutually_recursive_6.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_6.expected 
      mutually_recursive_6_cdcl_tableaux.output)))

(rule
 (target mutually_recursive_6_cdcl.output)
 (deps (:input mutually_recursive_6.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_6.expected 
      mutually_recursive_6_cdcl.output)))

(rule
 (target mutually_recursive_6_tableaux_cdcl.output)
 (deps (:input mutually_recursive_6.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_6.expected 
      mutually_recursive_6_tableaux_cdcl.output)))

(rule
 (target mutually_recursive_6_tableaux.output)
 (deps (:input mutually_recursive_6.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_6.expected 
      mutually_recursive_6_tableaux.output)))

(rule
 (target mutually_recursive_5_cdcl_tableaux.output)
 (deps (:input mutually_recursive_5.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_5.expected 
      mutually_recursive_5_cdcl_tableaux.output)))

(rule
 (target mutually_recursive_5_cdcl.output)
 (deps (:input mutually_recursive_5.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_5.expected 
      mutually_recursive_5_cdcl.output)))

(rule
 (target mutually_recursive_5_tableaux_cdcl.output)
 (deps (:input mutually_recursive_5.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_5.expected 
      mutually_recursive_5_tableaux_cdcl.output)))

(rule
 (target mutually_recursive_5_tableaux.output)
 (deps (:input mutually_recursive_5.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_5.expected 
      mutually_recursive_5_tableaux.output)))

(rule
 (target mutually_recursive_3_cdcl_tableaux.output)
 (deps (:input mutually_recursive_3.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_3.expected 
      mutually_recursive_3_cdcl_tableaux.output)))

(rule
 (target mutually_recursive_3_cdcl.output)
 (deps (:input mutually_recursive_3.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_3.expected 
      mutually_recursive_3_cdcl.output)))

(rule
 (target mutually_recursive_3_tableaux_cdcl.output)
 (deps (:input mutually_recursive_3.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_3.expected 
      mutually_recursive_3_tableaux_cdcl.output)))

(rule
 (target mutually_recursive_3_tableaux.output)
 (deps (:input mutually_recursive_3.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_3.expected 
      mutually_recursive_3_tableaux.output)))

(rule
 (target mutually_recursive_2_cdcl_tableaux.output)
 (deps (:input mutually_recursive_2.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_2.expected 
      mutually_recursive_2_cdcl_tableaux.output)))

(rule
 (target mutually_recursive_2_cdcl.output)
 (deps (:input mutually_recursive_2.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_2.expected 
      mutually_recursive_2_cdcl.output)))

(rule
 (target mutually_recursive_2_tableaux_cdcl.output)
 (deps (:input mutually_recursive_2.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_2.expected 
      mutually_recursive_2_tableaux_cdcl.output)))

(rule
 (target mutually_recursive_2_tableaux.output)
 (deps (:input mutually_recursive_2.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive_2.expected 
      mutually_recursive_2_tableaux.output)))

(rule
 (target mutually_recursive_cdcl_tableaux.output)
 (deps (:input mutually_recursive.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive.expected 
      mutually_recursive_cdcl_tableaux.output)))

(rule
 (target mutually_recursive_cdcl.output)
 (deps (:input mutually_recursive.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive.expected 
      mutually_recursive_cdcl.output)))

(rule
 (target mutually_recursive_tableaux_cdcl.output)
 (deps (:input mutually_recursive.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive.expected 
      mutually_recursive_tableaux_cdcl.output)))

(rule
 (target mutually_recursive_tableaux.output)
 (deps (:input mutually_recursive.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff mutually_recursive.expected 
      mutually_recursive_tableaux.output)))

(rule
 (target match_in_terms_cdcl_tableaux.output)
 (deps (:input match_in_terms.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_in_terms.expected 
      match_in_terms_cdcl_tableaux.output)))

(rule
 (target match_in_terms_cdcl.output)
 (deps (:input match_in_terms.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_in_terms.expected 
      match_in_terms_cdcl.output)))

(rule
 (target match_in_terms_tableaux_cdcl.output)
 (deps (:input match_in_terms.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_in_terms.expected 
      match_in_terms_tableaux_cdcl.output)))

(rule
 (target match_in_terms_tableaux.output)
 (deps (:input match_in_terms.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_in_terms.expected 
      match_in_terms_tableaux.output)))

(rule
 (target match_example_0_cdcl_tableaux.output)
 (deps (:input match_example_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example_0.expected 
      match_example_0_cdcl_tableaux.output)))

(rule
 (target match_example_0_cdcl.output)
 (deps (:input match_example_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example_0.expected 
      match_example_0_cdcl.output)))

(rule
 (target match_example_0_tableaux_cdcl.output)
 (deps (:input match_example_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example_0.expected 
      match_example_0_tableaux_cdcl.output)))

(rule
 (target match_example_0_tableaux.output)
 (deps (:input match_example_0.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example_0.expected 
      match_example_0_tableaux.output)))

(rule
 (target match_example_cdcl_tableaux.output)
 (deps (:input match_example.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example.expected 
      match_example_cdcl_tableaux.output)))

(rule
 (target match_example_cdcl.output)
 (deps (:input match_example.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example.expected 
      match_example_cdcl.output)))

(rule
 (target match_example_tableaux_cdcl.output)
 (deps (:input match_example.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example.expected 
      match_example_tableaux_cdcl.output)))

(rule
 (target match_example_tableaux.output)
 (deps (:input match_example.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff match_example.expected 
      match_example_tableaux.output)))

(rule
 (target bug-in-typing-destr+recursive-adt_cdcl_tableaux.output)
 (deps (:input bug-in-typing-destr+recursive-adt.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff bug-in-typing-destr+recursive-adt.expected 
      bug-in-typing-destr+recursive-adt_cdcl_tableaux.output)))

(rule
 (target bug-in-typing-destr+recursive-adt_cdcl.output)
 (deps (:input bug-in-typing-destr+recursive-adt.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff bug-in-typing-destr+recursive-adt.expected 
      bug-in-typing-destr+recursive-adt_cdcl.output)))

(rule
 (target bug-in-typing-destr+recursive-adt_tableaux_cdcl.output)
 (deps (:input bug-in-typing-destr+recursive-adt.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff bug-in-typing-destr+recursive-adt.expected 
      bug-in-typing-destr+recursive-adt_tableaux_cdcl.output)))

(rule
 (target bug-in-typing-destr+recursive-adt_tableaux.output)
 (deps (:input bug-in-typing-destr+recursive-adt.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff bug-in-typing-destr+recursive-adt.expected 
      bug-in-typing-destr+recursive-adt_tableaux.output)))

(rule
 (target adts-hidden-recursion_cdcl_tableaux.output)
 (deps (:input adts-hidden-recursion.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff adts-hidden-recursion.expected 
      adts-hidden-recursion_cdcl_tableaux.output)))

(rule
 (target adts-hidden-recursion_cdcl.output)
 (deps (:input adts-hidden-recursion.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff adts-hidden-recursion.expected 
      adts-hidden-recursion_cdcl.output)))

(rule
 (target adts-hidden-recursion_tableaux_cdcl.output)
 (deps (:input adts-hidden-recursion.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff adts-hidden-recursion.expected 
      adts-hidden-recursion_tableaux_cdcl.output)))

(rule
 (target adts-hidden-recursion_tableaux.output)
 (deps (:input adts-hidden-recursion.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
 (rule
  (alias runtest)
   (package alt-ergo-lib)
    (action (diff adts-hidden-recursion.expected 
      adts-hidden-recursion_tableaux.output)))
; Auto-generated part end
