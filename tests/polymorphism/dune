; File auto-generated by gentests

; Auto-generated part begin
(rule
 (target testfile-polymorphism008_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism008.expected 
     testfile-polymorphism008_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism008_cdcl.output)
 (deps (:input testfile-polymorphism008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism008.expected 
     testfile-polymorphism008_cdcl.output)))

(rule
 (target testfile-polymorphism008_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism008.expected 
     testfile-polymorphism008_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism008_tableaux.output)
 (deps (:input testfile-polymorphism008.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism008.expected 
     testfile-polymorphism008_tableaux.output)))

(rule
 (target testfile-polymorphism007_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism007.expected 
     testfile-polymorphism007_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism007_cdcl.output)
 (deps (:input testfile-polymorphism007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism007.expected 
     testfile-polymorphism007_cdcl.output)))

(rule
 (target testfile-polymorphism007_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism007.expected 
     testfile-polymorphism007_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism007_tableaux.output)
 (deps (:input testfile-polymorphism007.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism007.expected 
     testfile-polymorphism007_tableaux.output)))

(rule
 (target testfile-polymorphism006_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism006.expected 
     testfile-polymorphism006_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism006_cdcl.output)
 (deps (:input testfile-polymorphism006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism006.expected 
     testfile-polymorphism006_cdcl.output)))

(rule
 (target testfile-polymorphism006_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism006.expected 
     testfile-polymorphism006_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism006_tableaux.output)
 (deps (:input testfile-polymorphism006.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism006.expected 
     testfile-polymorphism006_tableaux.output)))

(rule
 (target testfile-polymorphism005_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism005.expected 
     testfile-polymorphism005_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism005_cdcl.output)
 (deps (:input testfile-polymorphism005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism005.expected 
     testfile-polymorphism005_cdcl.output)))

(rule
 (target testfile-polymorphism005_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism005.expected 
     testfile-polymorphism005_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism005_tableaux.output)
 (deps (:input testfile-polymorphism005.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism005.expected 
     testfile-polymorphism005_tableaux.output)))

(rule
 (target testfile-polymorphism004_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism004.expected 
     testfile-polymorphism004_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism004_cdcl.output)
 (deps (:input testfile-polymorphism004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism004.expected 
     testfile-polymorphism004_cdcl.output)))

(rule
 (target testfile-polymorphism004_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism004.expected 
     testfile-polymorphism004_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism004_tableaux.output)
 (deps (:input testfile-polymorphism004.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism004.expected 
     testfile-polymorphism004_tableaux.output)))

(rule
 (target testfile-polymorphism003_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism003.expected 
     testfile-polymorphism003_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism003_cdcl.output)
 (deps (:input testfile-polymorphism003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism003.expected 
     testfile-polymorphism003_cdcl.output)))

(rule
 (target testfile-polymorphism003_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism003.expected 
     testfile-polymorphism003_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism003_tableaux.output)
 (deps (:input testfile-polymorphism003.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism003.expected 
     testfile-polymorphism003_tableaux.output)))

(rule
 (target testfile-polymorphism002_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism002.expected 
     testfile-polymorphism002_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism002_cdcl.output)
 (deps (:input testfile-polymorphism002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism002.expected 
     testfile-polymorphism002_cdcl.output)))

(rule
 (target testfile-polymorphism002_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism002.expected 
     testfile-polymorphism002_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism002_tableaux.output)
 (deps (:input testfile-polymorphism002.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism002.expected 
     testfile-polymorphism002_tableaux.output)))

(rule
 (target testfile-polymorphism001_cdcl_tableaux.output)
 (deps (:input testfile-polymorphism001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL-Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism001.expected 
     testfile-polymorphism001_cdcl_tableaux.output)))

(rule
 (target testfile-polymorphism001_cdcl.output)
 (deps (:input testfile-polymorphism001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism001.expected 
     testfile-polymorphism001_cdcl.output)))

(rule
 (target testfile-polymorphism001_tableaux_cdcl.output)
 (deps (:input testfile-polymorphism001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux-CDCL %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism001.expected 
     testfile-polymorphism001_tableaux_cdcl.output)))

(rule
 (target testfile-polymorphism001_tableaux.output)
 (deps (:input testfile-polymorphism001.ae))
 (package alt-ergo-lib)
 (action
  (chdir %{workspace_root}
   (with-stdout-to %{target}
    (ignore-stderr
     (with-accepted-exit-codes 0
      (run alt-ergo --output=smtlib2 
       --timelimit=1 
       --sat-solver Tableaux %{input})))))))
(rule
 (alias runtest)
  (package alt-ergo-lib)
   (action (diff testfile-polymorphism001.expected 
     testfile-polymorphism001_tableaux.output)))
; Auto-generated part end
